{
  "objects": {
    "collections": [
      {
        "id": "finance",
        "createdAt": "2017-04-04T18:53:51.024Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "finance",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {}
      }
    ],
    "indexPipelines": [
      {
        "id": "default",
        "stages": [
          {
            "type": "field-mapping",
            "id": "e7fbd499-e11e-4a63-9528-2d8d196fa5ef",
            "mappings": [],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "field-mapping",
            "secretSourceStageId": "e7fbd499-e11e-4a63-9528-2d8d196fa5ef"
          },
          {
            "type": "solr-dynamic-field-name-mapping",
            "id": "4b2405cb-b091-4bf4-bd94-2d78fd4c62a9",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "skip": false,
            "label": "solr-dynamic-field-name-mapping",
            "secretSourceStageId": "4b2405cb-b091-4bf4-bd94-2d78fd4c62a9"
          },
          {
            "type": "solr-index",
            "id": "06ceeb08-c164-4631-8722-e9e200c6a104",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "06ceeb08-c164-4631-8722-e9e200c6a104"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "default"
        }
      },
      {
        "id": "_system",
        "stages": [
          {
            "type": "solr-index",
            "id": "solr-system",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "solr-system"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "_system"
        }
      },
      {
        "id": "metadata_normalization",
        "stages": [
          {
            "type": "tika-parser",
            "id": "conn_tika",
            "includeImages": true,
            "flattenCompound": false,
            "addFailedDocs": true,
            "addOriginalContent": false,
            "contentField": "_raw_content_",
            "contentEncoding": "binary",
            "returnXml": false,
            "keepOriginalStructure": false,
            "extractHtmlLinks": true,
            "extractOtherLinks": false,
            "includeContentTypes": [],
            "excludeContentTypes": [],
            "zipBombCompressionRatio": 200,
            "skip": false,
            "label": "tika-parser",
            "secretSourceStageId": "conn_tika"
          },
          {
            "type": "field-mapping",
            "id": "conn_mapping",
            "mappings": [
              {
                "source": "Content-Encoding",
                "target": "contentEncoding_s",
                "operation": "move"
              },
              {
                "source": "Character-Set",
                "target": "characterSet_s",
                "operation": "move"
              },
              {
                "source": "Content-Length",
                "target": "contentLength_l",
                "operation": "move"
              },
              {
                "source": "FileSize",
                "target": "fileSize_l",
                "operation": "move"
              },
              {
                "source": "FileName",
                "target": "fileName_s",
                "operation": "move"
              },
              {
                "source": "Content-Type",
                "target": "mimeType_s",
                "operation": "move"
              },
              {
                "source": "MimeType",
                "target": "mimeType_s",
                "operation": "move"
              },
              {
                "source": "Title",
                "target": "title",
                "operation": "move"
              },
              {
                "source": "Description",
                "target": "description",
                "operation": "move"
              },
              {
                "source": "Subject",
                "target": "subject",
                "operation": "move"
              },
              {
                "source": "created",
                "target": "dateCreated_dt",
                "operation": "move"
              },
              {
                "source": "ContentCreated",
                "target": "dateCreated_dt",
                "operation": "move"
              },
              {
                "source": "meta:creation_date",
                "target": "dateCreated_dt",
                "operation": "move"
              },
              {
                "source": "Creation-Date",
                "target": "dateCreated_dt",
                "operation": "move"
              },
              {
                "source": "date",
                "target": "dateCreated_dt",
                "operation": "move"
              },
              {
                "source": "Author",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "meta:author",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "Contributor",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "LastModifiedBy",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "Last-Author",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "fullname",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "meta:last-author",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "Last-Modified",
                "target": "last_modified",
                "operation": "move"
              },
              {
                "source": "fileLastModified",
                "target": "last_modified",
                "operation": "move"
              },
              {
                "source": "ContentLastModified",
                "target": "last_modified",
                "operation": "move"
              },
              {
                "source": "Last-Save-Date",
                "target": "last_modified",
                "operation": "move"
              },
              {
                "source": "fullText",
                "target": "content_txt",
                "operation": "move"
              },
              {
                "source": "plainTextContent",
                "target": "content_txt",
                "operation": "move"
              },
              {
                "source": "plainTextMessageContent",
                "target": "content_txt",
                "operation": "move"
              },
              {
                "source": "body",
                "target": "content_txt",
                "operation": "move"
              },
              {
                "source": "content",
                "target": "content_txt",
                "operation": "move"
              },
              {
                "source": "keyword",
                "target": "keywords",
                "operation": "move"
              },
              {
                "source": "Keywords",
                "target": "keywords",
                "operation": "move"
              },
              {
                "source": "messageSubject",
                "target": "title",
                "operation": "move"
              },
              {
                "source": "name",
                "target": "title",
                "operation": "move"
              },
              {
                "source": "Page-Count",
                "target": "pageCount_i",
                "operation": "move"
              },
              {
                "source": "PageCount",
                "target": "pageCount_i",
                "operation": "move"
              },
              {
                "source": "Slide-Count",
                "target": "pageCount_i",
                "operation": "move"
              },
              {
                "source": "Slides",
                "target": "pageCount_i",
                "operation": "move"
              },
              {
                "source": "xmpTPg:NPages",
                "target": "pageCount_i",
                "operation": "move"
              },
              {
                "source": "parsing_time",
                "target": "parsing_time_l",
                "operation": "move"
              },
              {
                "source": "parsing",
                "target": "parsing_s",
                "operation": "move"
              },
              {
                "source": "Comments",
                "target": "comments",
                "operation": "move"
              },
              {
                "source": "resourceName",
                "target": "resourcename_s",
                "operation": "move"
              },
              {
                "source": "resource_name",
                "target": "resourcename_s",
                "operation": "move"
              },
              {
                "source": "Content-Location",
                "target": "url",
                "operation": "move"
              },
              {
                "source": "meta:character-count",
                "target": "character-count_i",
                "operation": "move"
              },
              {
                "source": "Word-Count",
                "target": "wordCount_i",
                "operation": "move"
              },
              {
                "source": "type",
                "target": "type_s",
                "operation": "move"
              },
              {
                "source": "X-Parsed-By",
                "target": "xParsedBy_ss",
                "operation": "move"
              },
              {
                "source": "body.links.anchor",
                "target": "body_links_anchor_ss",
                "operation": "move"
              },
              {
                "source": "body.links.params.alt",
                "target": "body_links_params_alt_ss",
                "operation": "move"
              },
              {
                "source": "body.links.params.type",
                "target": "body_links_params_type_ss",
                "operation": "move"
              },
              {
                "source": "body.links.title",
                "target": "body_links_title_ss",
                "operation": "move"
              },
              {
                "source": "body.links.targetUri",
                "target": "body_links_targetUri_ss",
                "operation": "move"
              },
              {
                "source": "Brightness Value",
                "target": "Brightness_Value_ss",
                "operation": "move"
              },
              {
                "source": "svn:eol-style",
                "target": "svn_eol_style_s",
                "operation": "move"
              },
              {
                "source": "svn:keywords",
                "target": "svn_keywords",
                "operation": "move"
              },
              {
                "source": "svn:last-author",
                "target": "author",
                "operation": "move"
              },
              {
                "source": "svn:last-change-date",
                "target": "last_modified",
                "operation": "move"
              },
              {
                "source": "svn:last-change-revision",
                "target": "svn_last_change_revision_s",
                "operation": "move"
              },
              {
                "source": "svn:mergeinfo",
                "target": "svn_mergeinfo_txt",
                "operation": "move"
              },
              {
                "source": "svn:mime-type",
                "target": "svn_mime_type_ss",
                "operation": "move"
              },
              {
                "source": "/(.*)_[isltbfd]s?/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_txt/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_en/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_dts?/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_t[ilfd]/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_p/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_c/",
                "operation": "keep"
              },
              {
                "source": "/(.*)_coordinate/",
                "operation": "keep"
              },
              {
                "source": "/attr_(.*)/",
                "operation": "keep"
              },
              {
                "source": "/random_(.*)/",
                "operation": "keep"
              },
              {
                "source": "/ignored_(.*)/",
                "operation": "keep"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "field-mapping",
            "secretSourceStageId": "conn_mapping"
          },
          {
            "type": "lang-detect",
            "id": "conn_language_detection",
            "source": [
              "content",
              "title"
            ],
            "outputType": "document",
            "outputKey": "languages",
            "documentPostfix": "_lang",
            "skip": false,
            "label": "lang-detect",
            "secretSourceStageId": "conn_language_detection"
          },
          {
            "type": "solr-dynamic-field-name-mapping",
            "id": "dyn-mapping-default",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "skip": false,
            "label": "solr-dynamic-field-name-mapping",
            "secretSourceStageId": "dyn-mapping-default"
          },
          {
            "type": "solr-index",
            "id": "solr-default",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "unmapped": {
              "source": "/(^.*)$/",
              "target": "$1_txt",
              "operation": "move"
            },
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "solr-default"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "metadata_normalization"
        }
      },
      {
        "id": "stock-press-release",
        "stages": [
          {
            "type": "date-parsing",
            "id": "5sk",
            "sourceFields": [
              "time[datetime]"
            ],
            "dateFormats": [
              "MMM dd, YYYY"
            ],
            "requireTimezone": false,
            "ignoreInvalid": false,
            "splitLocal": false,
            "splitUTC": false,
            "defaultTimezone": "UTC",
            "defaultLocale": "en",
            "skip": false,
            "label": "date-parsing",
            "secretSourceStageId": "5sk"
          },
          {
            "type": "javascript-index",
            "id": "x2grdv2o4w4hg2e29",
            "script": "function(doc) {\n  if (doc.getId() !== null && doc.getFirstFieldValue(\"Content-Type\").equals(\"application/pdf\")) {\n    var CALAIS_URL = \"http://54.88.199.223:8080/tag/rs/enrich\";\n    var client = org.apache.http.impl.client.HttpClientBuilder.create().setUserAgent(\"Calais Rest Client\").build();\n    var inContentType = \"application/pdf\";\n    var outContentType = \"application/json\";\n\n    try {\n      var method = new org.apache.http.client.methods.HttpPost(CALAIS_URL);\n\n      // Set mandatory parameters\n      method.setHeader(\"X-AG-Access-Token\", null);\n\n      // Set input content type\n      method.setHeader(\"Content-Type\", inContentType);\n\n      // Set response/output format\n      method.setHeader(\"outputformat\", outContentType);\n\n      var bytes = doc.getContent();\n      var entity = new org.apache.http.entity.ByteArrayEntity(bytes);\n\n      method.setEntity(entity);\n\n      try {\n        var httpResponse = client.execute(method);\n\n        var returnCode = httpResponse.getStatusLine().getStatusCode();\n        if (returnCode == org.apache.http.HttpStatus.SC_NOT_IMPLEMENTED) {\n          logger.info(\"********* The Post method is not implemented by this URI\");\n\t\t\tlogger.info(\"********* Here is the response: \" + httpResponse.toString());\n          // still consume the response body\n          logger.info(\"response: \"+ httpResponse.toString());\n        } else if (returnCode == org.apache.http.HttpStatus.SC_OK) {\n          logger.info(\"********* Response: OK\" );\n          logger.info(\"********* Here is the response: \" + httpResponse.toString());\n\n          var inputStream = httpResponse.getEntity().getContent();\n\n          var inputStreamReader = new java.io.InputStreamReader(inputStream);\n          var bufferedReader = new java.io.BufferedReader(inputStreamReader);\n          var response = \"\";\n          var line = \"\";\n          while((line = bufferedReader.readLine()) != null) {\n            response += line;\n          }\n\n          logger.info(\"response entity: \" + response);\n          doc.addField('version', 'v1');\n        } else {\n          logger.info(\"***** File post failed: \" + input);\n          logger.info(\"***** Got code: \" + returnCode);\n          logger.info(\"***** response: \"+ httpResponse.toString());\n          doc.addField('version', 'untagged');\n        }\n\n        doc.addField(\"returnCode\", returnCode);\n        doc.addField(\"responseValue\", response);\n      } catch (e) {\n        logger.info(e.message);\n      } finally {\n        method.releaseConnection();\n      }\n    } catch (e) {\n        logger.info(e.message);\n    }\n  }\n\n  return doc;\n}\n",
            "skip": false,
            "label": "TRIT-PDF-CONNECT",
            "condition": "",
            "secretSourceStageId": "x2grdv2o4w4hg2e29"
          },
          {
            "type": "javascript-index",
            "id": "hlugtlt778yy9o1or",
            "script": "function(doc) {\n    //varibale contating the original news item\\\n    if (doc.getId() !== null && doc.getFirstFieldValue(\"Content-Type\") != \"application/pdf\") {\n\n\n        logger.info(\"why is this not being run\");\n        var news_bodies = doc.getFieldValues('body');\n\n        // if no new body - do nothing\\\\\\\n        if (news_bodies == null || news_bodies.size() < 1) {\n            logger.info(\"this document had no content in the content field\");\n            return null;\n        }\n\n        var description = doc.getFirstFieldValue('title_txt');\n\n        var news_body = \"\";\n        for (i = 0; i < news_bodies.size(); i++) {\n            news_body = news_body.concat(news_bodies.get(i) + '\\\\n');\n        }\n\n\n        // news_body = news_body.split(\"\\n\").join(\" \");\n        //news_body1= news_body.replace(/GRPN/g, 'USA');\n        //  str = str.replace(\" \", \"_\");\n\n        var pattern = /\\n/g; // notice \"g\" here now!\n\n        news_body = news_body.replace(pattern, \" \");\n        //doc.addField('news_body_txt', news_body);\n\n        // Unique Identifier to connec tot calais\\\\\\\n        // var uniqueAccessKey='7KIwwT7p85yGM7Ag8h94YfXS5KNcbtur';\n        var uniqueAccessKey = '3e7c22df-a19d-44e3-a7cd-ee15256a700b';\n\n        // base url for open calais\\\\\\\n        //var CALAIS_URL = \"https://api.thomsonreuters.com/permid/calais\";\n        var CALAIS_URL = \"http://34.203.123.232:8080/tag/rs/enrich\";\n        // http://52.204.66.106:8080/\n        //post method\\\\\\\n        var method = new org.apache.commons.httpclient.methods.PostMethod(CALAIS_URL);\n\n        // Set mandatory parameters\\\\\\\n        method.setRequestHeader(\"X-AG-Access-Token\", uniqueAccessKey);\n        // Set input content type\\\\\\\n        method.setRequestHeader(\"Content-Type\", \"text/raw\");\n        // Set response/output format\\\\\\\n        method.setRequestHeader(\"outputformat\", \"application/json\");\n\n        method.setRequestBody(news_body);\n\n        var client = new org.apache.commons.httpclient.HttpClient;\n\n        var returnCode = client.executeMethod(method);\n\n        var responseValue = \"\";\n\n        //    if (returnCode == org.apache.commons.httpclient.HttpStatus.SC_NOT_IMPLEMENTED) {\n        //     //  Do Something to capture response code\\\\\\\n        //      logger.warn(\"this is not working\");\n        //      doc.addField('version', 'untagged');\n        //  } else if (returnCode == org.apache.commons.httpclient.HttpStatus.SC_OK) {\n        // responseValue = method.getResponseBodyAsString();\n        //    doc.addField('version', 'v1');\n        //   } else {\n        //     //  Do Something to capture response code\\\\\\\n        //     logger.warn(\"this is not working\");\n        //     doc.addField('version', 'untagged');\n        //  }\n\n\n        if (returnCode > 200) {\n            //  Do Something to capture response code\\\\\\\n            logger.warn(\"this is not working\");\n            doc.addField('version', 'untagged');\n        } else if (returnCode == 200) {\n            responseValue = method.getResponseBodyAsString();\n            doc.addField('version', 'v1');\n        } else {\n            //  Do Something to capture response code\\\\\\\n            logger.warn(\"this is not working\");\n            doc.addField('version', 'untagged');\n        }\n\n        // remove single new bodies fields to sum them up in one \\\\\\\n        //doc.removeFields('news_body');\n        // doc.addField('news_body', news_body);\n\n        doc.addField('returnCode', returnCode);\n        doc.addField('responseValue', responseValue);\n\n    }\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-ALL-CONNECT",
            "secretSourceStageId": "hlugtlt778yy9o1or"
          },
          {
            "type": "javascript-index",
            "id": "2r0kyrb9r6ax7p66r",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n            ////////////////////////////\n            //Social Tags\n            ////////////////////////////\n\n            if (tag != null && tag.equals(\"socialTag\") && obj[0][allKeys[i]].forenduserdisplay.equals(\"true\")) {\n                if (obj[0][allKeys[i]].forenduserdisplay.equals(\"true\"))\n                    doc.addField('social_tags_ss', obj[0][allKeys[i]].name);\n                // doc.addField('entity_all_lv_s', obj[0][allKeys[i]].name);\n                if (obj[0][allKeys[i]].importance == 1) {\n                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_hv_ss', obj[0][allKeys[i]].name);\n\n                } else if (obj[0][allKeys[i]].importance == 2) {\n                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_mv_ss', obj[0][allKeys[i]].name);\n                } else if (obj[0][allKeys[i]].importance == 3) {\n                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_lv_ss', obj[0][allKeys[i]].name);\n                }\n            }\n\n\n\n            ////////////////////////////\n            //Extract Entity Types\n            ////////////////////////////\n            if (type != null && tag != null && tag.equals(\"entities\")) {\n\n                if (type.equals(\"Company\")) {\n                    var companyScore = parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance);\n                    //  var companyScore = 0.5;\n                    doc.addField('entity_company_ss', obj[0][allKeys[i]].name);\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + companyScore);\n                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].name + '|' + companyScore);\n\n\n                    // logger.info(\"company has been added \" + obj[0][allKeys[i]].name + \" with a relevance score of \" + obj[0][allKeys[i]].relevance);\n                    if ((parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance) >= .6)) {\n                        // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].name);\n                        // doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_hv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n                        }\n                        // if the resolution isn't ana array\n                        if (obj[0][allKeys[i]].resolutions != null) {\n                            // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].name);\n                            // doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n\n\n\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].name);\n\n                              doc.addField('entity_company_numbers_hv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                  \n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n                                    doc.addField('entity_stock_ticker_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].primaryric + '|' + companyScore);\n\n                                }\n                                // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_company_commonname_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n                                  // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                  doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                  doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n\n                                  doc.addField('entity_company_numbers_hv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                    \n                                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                        doc.addField('entity_stock_ticker_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n\n                                    }\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_company_commonname_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n\n\n                                    }\n                                }\n                            }\n                        }\n\n                    } else if (parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance) >= .4) {\n\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_mv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n\n                        }\n\n\n                        if (obj[0][allKeys[i]].resolutions != null) {\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                              doc.addField('entity_company_numbers_mv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                              \n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n\n                                  \n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_stock_ticker_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n\n                                }\n                                // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_company_commonname_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                        doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                        // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_company_numbers_mv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_stock_ticker_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                    }\n                                    // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_company_commonname_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n\n\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        //  doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].name);\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_lv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n                        }\n\n                        if (obj[0][allKeys[i]].resolutions != null) {\n\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                              doc.addField('entity_company_numbers_lv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n                                  \n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_stock_ticker_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                }\n                                // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n                                    doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname + '|' + companyScore);\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n\n                                  doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                  doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n\n                                  doc.addField('entity_company_numbers_lv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                        // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                      \n                                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_stock_ticker_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n\n                                    }\n                                    // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_company_commonname_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                    }\n                                }\n                            }\n                            //still need to do this one this needs to be built out\n\n                        }\n                    }\n\n                } else if (type.equals(\"Country\")) {\n                    doc.addField('entity_country_ss', obj[0][allKeys[i]].name);\n                    //doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                    if (obj[0][allKeys[i]].relevance <= .2) {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n\n                        doc.addField('entity_country_lv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance < .2 && obj[0][allKeys[i]].relevance > .8) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_country_mv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance >= .8) {\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_country_hv_ss', obj[0][allKeys[i]].name);\n                    }\n                } else if (type.equals(\"Person\") || type.equals(\"Editor\") || type.equals(\"Journalist\")) {\n                    //  doc.addField('entity_person_ss', obj[0][allKeys[i]].name);\n\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                    if (obj[0][allKeys[i]].relevance <= .2) {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_person_lv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance < .2 && obj[0][allKeys[i]].relevance > .8) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_person_mv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance >= .8) {\n                        doc.addField('entity_person_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    }\n                }\n            }\n        }\n    }\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-ENTITY-PARSER",
            "secretSourceStageId": "2r0kyrb9r6ax7p66r"
          },
          {
            "type": "javascript-index",
            "id": "6ym6jkmn6cd6lxr",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n   var obj;\n    try {\n      obj = JSON.parse(responseValue);\n    } catch(err) {\n      doc.setField(\"version\", \"untagged\");\n      return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n            //logger.warn('test1234');\n            //if social tags\\\n\n            ////////////////////////////\n            //Extract Entity Types\n            ////////////////////////////\n\n            if (type != null && tag != null && tag.equals(\"relations\")) {\n                //Reject -, , , , , CompanyAffiliates, ,,,,,,, , ,, ,,, , , CompanyTicker,, , , , ,,, , ,,, , , , , , FDAPhase, , ,,, ,, , , , ,,, , , , , , , , , , , , ,,,, Quotation, ,,\n                if (!obj[0][allKeys[i]]._type.equals(\"Quotation\") && !obj[0][allKeys[i]]._type.equals(\"Company Affiliates\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTicker\") && !obj[0][allKeys[i]]._type.equals(\"CompanyLocation\") && !obj[0][allKeys[i]]._type.equals(\"FDAPhase\") && !obj[0][allKeys[i]]._type.equals(\"PersonCareer\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTicker\") && !obj[0][allKeys[i]]._type.equals(\"ArmedAttack\") && !obj[0][allKeys[i]]._type.equals(\"ArmsPurchaseSale\") && !obj[0][allKeys[i]]._type.equals(\"Arrest\") && !obj[0][allKeys[i]]._type.equals(\"CandidatePosition\") && !obj[0][allKeys[i]]._type.equals(\"CompanyAccountingChange\") && !obj[0][allKeys[i]]._type.equals(\"CompanyEmployeesNumber\") && !obj[0][allKeys[i]]._type.equals(\"CompanyListingChange\") && !obj[0][allKeys[i]]._type.equals(\"CompanyFounded\") && !obj[0][allKeys[i]]._type.equals(\"CompanyFounded\") && !obj[0][allKeys[i]]._type.equals(\"CompanyLocation\") && !obj[0][allKeys[i]]._type.equals(\"CompanyRestatement\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTechnology\") && !obj[0][allKeys[i]]._type.equals(\"ContactDetails\") && !obj[0][allKeys[i]]._type.equals(\"Conviction\") && !obj[0][allKeys[i]]._type.equals(\"CreditRating\") && !obj[0][allKeys[i]]._type.equals(\"DelayedFiling\") && !obj[0][allKeys[i]]._type.equals(\"DiplomaticRelations\") && !obj[0][allKeys[i]]._type.equals(\"EmploymentRelation\") && !obj[0][allKeys[i]]._type.equals(\"EnvironmentalIssue\") && !obj[0][allKeys[i]]._type.equals(\"Extinction\") && !obj[0][allKeys[i]]._type.equals(\"FamilyRelation\") && !obj[0][allKeys[i]]._type.equals(\"IndicesChanges\") && !obj[0][allKeys[i]]._type.equals(\"Indictment\") && !obj[0][allKeys[i]]._type.equals(\"ManMadeDisaster\") && !obj[0][allKeys[i]]._type.equals(\"MilitaryAction\") && !obj[0][allKeys[i]]._type.equals(\"MovieRelease\") && !obj[0][allKeys[i]]._type.equals(\"MusicAlbumRelease\") && !obj[0][allKeys[i]]._type.equals(\"NaturalDisaster\") && !obj[0][allKeys[i]]._type.equals(\"PersonAttributes\") && !obj[0][allKeys[i]]._type.equals(\"PersonCareer\") && !obj[0][allKeys[i]]._type.equals(\"PersonCommunication\") && !obj[0][allKeys[i]]._type.equals(\"PersonEducation\") && !obj[0][allKeys[i]]._type.equals(\"PersonEmailAddress\") && !obj[0][allKeys[i]]._type.equals(\"PersonLocation\") && !obj[0][allKeys[i]]._type.equals(\"PersonParty\") && !obj[0][allKeys[i]]._type.equals(\"PersonRelation\") && !obj[0][allKeys[i]]._type.equals(\"PersonTravel\") && !obj[0][allKeys[i]]._type.equals(\"PoliticalEndorsement\") && !obj[0][allKeys[i]]._type.equals(\"PoliticalRelationship\") && !obj[0][allKeys[i]]._type.equals(\"PollsResult\") && !obj[0][allKeys[i]]._type.equals(\"SecondaryIssuance\") && !obj[0][allKeys[i]]._type.equals(\"Trial\") && !obj[0][allKeys[i]]._type.equals(\"VotingResult\")) {\n                    doc.addField('relation_event_ss', obj[0][allKeys[i]]._type);\n                    var ref = \"\"\n                    var ref1 = \"\"\n                    var double_take = false;\n                    ref = obj[0][allKeys[i]].company\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].company_rated\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].acquirer\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].company_investigated\n                    if ((typeof ref == 'undefined')) {\n                        ref = obj[0][allKeys[i]].company_acquirer\n                        if (obj[0][allKeys[i]].company_beingacquired != null) {\n                            ref1 = obj[0][allKeys[i]].company_beingacquired\n                            double_take = true;\n                        }\n                    }\n\n                    if (ref != null && obj[0][ref] != null) {\n                        // doc.addField('entity_first_ss', Array.isArray(ref))\n                        if (Array.isArray(ref) == true) {\n                            for (k = 0; k < ref.length; ++k) {\n                                doc.addField('Company_Events_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('company_events_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                                var refKScores = parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance);\n\n                                if ((parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance) >= .6)) {\n\n                                    doc.addField('entity_all_hv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    // if the company can be resolved add its url,and perm id for the typeahead and confidance ranking\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_hv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_hv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                    }\n\n                                } else if ((parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance) >= .4)) {\n                                    doc.addField('entity_all_mv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_mv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_mv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n\n                                    }\n\n                                } else {\n                                    doc.addField('entity_all_lv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_lv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_lv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n\n                                    }\n                                }\n                            }\n\n\n                        } else {\n\n\n                            doc.addField('Company_Events_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                            doc.addField('event_support_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                            var refScore = parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance);\n\n                            if ((parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance) >= .6)) {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            } else if ((parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance) >= .4)) {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            } else {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n    // doc.removeFields(\"responseValue\");\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-EVENT-PARSER",
            "secretSourceStageId": "6ym6jkmn6cd6lxr"
          },
          {
            "type": "javascript-index",
            "id": "ar6aukm3jqvj3v7vi",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n\n\n            if (tag != null && tag.equals(\"industry\")) {\n                doc.addField('industry_tags_ss', obj[0][allKeys[i]].name);\n\n                doc.addField('industry_tags_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                if (parseFloat(obj[0][allKeys[i]].relevance) >= .8) {\n                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_hv_ss', obj[0][allKeys[i]].name);\n                } else if (parseFloat(obj[0][allKeys[i]].relevance) >= .5) {\n                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_mv_ss', obj[0][allKeys[i]].name);\n\n                } else {\n                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_lv_ss', obj[0][allKeys[i]].name);\n                }\n            }\n\n\n        }\n    }\n\n    return doc;\n}",
            "skip": false,
            "label": "TRIT-INDUSTRY-PARSER",
            "secretSourceStageId": "ar6aukm3jqvj3v7vi"
          },
          {
            "type": "javascript-index",
            "id": "cgbzduui1y993haor",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n\n            if (tag != null && tag.equals(\"topics\")) {\n                if (obj[0][allKeys[i]].rcscode != null) {\n\n                    doc.addField('topics_tags_ss', obj[0][allKeys[i]].name);\n                    doc.addField('topics_tags_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].score);\n\n                    if (parseFloat(obj[0][allKeys[i]].score) >= .8) {\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_hv_ss', obj[0][allKeys[i]].name);\n                    } else if (parseFloat(obj[0][allKeys[i]].score) >= .5) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_mv_ss', obj[0][allKeys[i]].name);\n                    } else {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_lv_ss', obj[0][allKeys[i]].name);\n                    }\n                }\n            }\n        }\n    }\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-TOPICS-PARSER",
            "secretSourceStageId": "cgbzduui1y993haor"
          },
          {
            "type": "field-mapping",
            "id": "kuz4r89n32jll3di",
            "mappings": [
              {
                "source": "entity_company_mv_ss",
                "target": "entity_company_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_company_hv_ss",
                "target": "entity_company_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_company_lv_ss",
                "target": "entity_company_lv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_hv_ss",
                "target": "entity_person_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_mv_ss",
                "target": "entity_person_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_lv_ss",
                "target": "entity_person_lv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_hv_ss",
                "target": "industry_tags_hv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_mv_ss",
                "target": "industry_tags_mv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_lv_ss",
                "target": "industry_tags_lv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_hv_ss",
                "target": "social_tags_hv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_mv_ss",
                "target": "social_tags_mv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_lv_ss",
                "target": "social_tags_lv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_hv_ss",
                "target": "entity_all_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_mv_ss",
                "target": "entity_all_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_lv_ss",
                "target": "entity_all_lv_txt",
                "operation": "copy"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "SEARCH-FIELDS-SETUP",
            "secretSourceStageId": "kuz4r89n32jll3di"
          },
          {
            "type": "field-mapping",
            "id": "2w6q6nr98gar79zfr",
            "mappings": [
              {
                "source": "entity_all_mv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_all_hv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_all_lv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_support_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "Autocomplete",
            "secretSourceStageId": "2w6q6nr98gar79zfr"
          },
          {
            "type": "solr-index",
            "id": "02a19bf5-7017-4433-a8e2-cb617c74a289",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "02a19bf5-7017-4433-a8e2-cb617c74a289"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "stock-press-release"
        }
      },
      {
        "id": "stock-history",
        "stages": [
          {
            "type": "field-mapping",
            "id": "093db091-c395-4ee6-ac32-ee936134f98c",
            "mappings": [],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "field-mapping",
            "secretSourceStageId": "093db091-c395-4ee6-ac32-ee936134f98c"
          },
          {
            "type": "solr-dynamic-field-name-mapping",
            "id": "20640330-74c1-4567-828a-74624f7480a9",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "skip": false,
            "label": "solr-dynamic-field-name-mapping",
            "secretSourceStageId": "20640330-74c1-4567-828a-74624f7480a9"
          },
          {
            "type": "solr-index",
            "id": "40dea4a0-b7af-487f-8ddb-b9e1870105d0",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "40dea4a0-b7af-487f-8ddb-b9e1870105d0"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "stock-history"
        }
      },
      {
        "id": "_signals_ingest",
        "stages": [
          {
            "type": "signal-formatter",
            "id": "ingest-signals",
            "flatten": true,
            "allowedTypes": [],
            "undefinedType": "general",
            "timestampLocale": "en-US",
            "skip": false,
            "label": "signal-formatter",
            "secretSourceStageId": "ingest-signals"
          },
          {
            "type": "field-mapping",
            "id": "mapping-signals",
            "mappings": [
              {
                "source": "type",
                "target": "type_s",
                "operation": "move"
              },
              {
                "source": "flag",
                "target": "flag_s",
                "operation": "move"
              },
              {
                "source": "params.flag",
                "target": "flag_s",
                "operation": "move"
              },
              {
                "source": "timestamp",
                "target": "timestamp_tdt",
                "operation": "move"
              },
              {
                "source": "params.count",
                "target": "count_i",
                "operation": "move"
              },
              {
                "source": "params.weight",
                "target": "weight_d",
                "operation": "move"
              },
              {
                "source": "params.query",
                "target": "query_s",
                "operation": "copy"
              },
              {
                "source": "params.query",
                "target": "query_t",
                "operation": "move"
              },
              {
                "source": "params.docId",
                "target": "doc_id_s",
                "operation": "move"
              },
              {
                "source": "params.userId",
                "target": "user_id_s",
                "operation": "move"
              },
              {
                "source": "params.sessionId",
                "target": "session_id_s",
                "operation": "move"
              },
              {
                "source": "params.filterQueries",
                "target": "filters_s",
                "operation": "move"
              },
              {
                "source": "/params\\.(.*)(?<!_.{1,2})$/",
                "target": "params.$1_s",
                "operation": "move"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "field-mapping",
            "secretSourceStageId": "mapping-signals"
          },
          {
            "type": "solr-index",
            "id": "solr-system",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "solr-system"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "_signals_ingest"
        }
      },
      {
        "id": "TRIT-ALL-PAYLOAD",
        "stages": [
          {
            "type": "tika-parser",
            "id": "yqw5pr93zpu2qpvi",
            "includeImages": false,
            "flattenCompound": true,
            "addFailedDocs": false,
            "addOriginalContent": true,
            "contentField": "_raw_content_",
            "contentEncoding": "binary",
            "returnXml": false,
            "keepOriginalStructure": false,
            "extractHtmlLinks": true,
            "extractOtherLinks": false,
            "includeContentTypes": [],
            "excludeContentTypes": [],
            "zipBombCompressionRatio": 200,
            "skip": false,
            "label": "tika-parser",
            "secretSourceStageId": "yqw5pr93zpu2qpvi",
            "csvParsing": true
          },
          {
            "type": "javascript-index",
            "id": "x2grdv2o4w4hg2e29",
            "script": "function(doc) {\n  if (doc.getId() !== null && doc.getFirstFieldValue(\"Content-Type\").equals(\"application/pdf\")) {\n    var CALAIS_URL = \"http://54.88.199.223:8080/tag/rs/enrich\";\n    var client = org.apache.http.impl.client.HttpClientBuilder.create().setUserAgent(\"Calais Rest Client\").build();\n    var inContentType = \"application/pdf\";\n    var outContentType = \"application/json\";\n\n    try {\n      var method = new org.apache.http.client.methods.HttpPost(CALAIS_URL);\n\n      // Set mandatory parameters\n      method.setHeader(\"X-AG-Access-Token\", null);\n\n      // Set input content type\n      method.setHeader(\"Content-Type\", inContentType);\n\n      // Set response/output format\n      method.setHeader(\"outputformat\", outContentType);\n\n      var bytes = doc.getContent();\n      var entity = new org.apache.http.entity.ByteArrayEntity(bytes);\n\n      method.setEntity(entity);\n\n      try {\n        var httpResponse = client.execute(method);\n\n        var returnCode = httpResponse.getStatusLine().getStatusCode();\n        if (returnCode == org.apache.http.HttpStatus.SC_NOT_IMPLEMENTED) {\n          logger.info(\"********* The Post method is not implemented by this URI\");\n\t\t\tlogger.info(\"********* Here is the response: \" + httpResponse.toString());\n          // still consume the response body\n          logger.info(\"response: \"+ httpResponse.toString());\n        } else if (returnCode == org.apache.http.HttpStatus.SC_OK) {\n          logger.info(\"********* Response: OK\" );\n          logger.info(\"********* Here is the response: \" + httpResponse.toString());\n\n          var inputStream = httpResponse.getEntity().getContent();\n\n          var inputStreamReader = new java.io.InputStreamReader(inputStream);\n          var bufferedReader = new java.io.BufferedReader(inputStreamReader);\n          var response = \"\";\n          var line = \"\";\n          while((line = bufferedReader.readLine()) != null) {\n            response += line;\n          }\n\n          logger.info(\"response entity: \" + response);\n          doc.addField('version', 'v1');\n        } else {\n          logger.info(\"***** File post failed: \" + input);\n          logger.info(\"***** Got code: \" + returnCode);\n          logger.info(\"***** response: \"+ httpResponse.toString());\n          doc.addField('version', 'untagged');\n        }\n\n        doc.addField(\"returnCode\", returnCode);\n        doc.addField(\"responseValue\", response);\n      } catch (e) {\n        logger.info(e.message);\n      } finally {\n        method.releaseConnection();\n      }\n    } catch (e) {\n        logger.info(e.message);\n    }\n  }\n\n  return doc;\n}\n",
            "skip": false,
            "label": "TRIT-PDF-CONNECT",
            "condition": "",
            "secretSourceStageId": "x2grdv2o4w4hg2e29"
          },
          {
            "type": "javascript-index",
            "id": "hlugtlt778yy9o1or",
            "script": "function(doc) {\n    //varibale contating the original news item\\\n    if (doc.getId() !== null && doc.getFirstFieldValue(\"Content-Type\") != \"application/pdf\") {\n\n\n        logger.info(\"why is this not being run\");\n        var news_bodies = doc.getFieldValues('body');\n\n        // if no new body - do nothing\\\\\\\n        if (news_bodies == null || news_bodies.size() < 1) {\n            logger.info(\"this document had no content in the content field\");\n            return null;\n        }\n\n        var description = doc.getFirstFieldValue('title_txt');\n\n        var news_body = \"\";\n        for (i = 0; i < news_bodies.size(); i++) {\n            news_body = news_body.concat(news_bodies.get(i) + '\\\\n');\n        }\n\n\n        // news_body = news_body.split(\"\\n\").join(\" \");\n        //news_body1= news_body.replace(/GRPN/g, 'USA');\n        //  str = str.replace(\" \", \"_\");\n\n        var pattern = /\\n/g; // notice \"g\" here now!\n\n        news_body = news_body.replace(pattern, \" \");\n        //doc.addField('news_body_txt', news_body);\n\n        // Unique Identifier to connec tot calais\\\\\\\n        // var uniqueAccessKey='7KIwwT7p85yGM7Ag8h94YfXS5KNcbtur';\n        var uniqueAccessKey = '3e7c22df-a19d-44e3-a7cd-ee15256a700b';\n\n        // base url for open calais\\\\\\\n        //var CALAIS_URL = \"https://api.thomsonreuters.com/permid/calais\";\n        var CALAIS_URL = \"http://54.88.199.223:8080/tag/rs/enrich\";\n        // http://52.204.66.106:8080/\n        //post method\\\\\\\n        var method = new org.apache.commons.httpclient.methods.PostMethod(CALAIS_URL);\n\n        // Set mandatory parameters\\\\\\\n        method.setRequestHeader(\"X-AG-Access-Token\", uniqueAccessKey);\n        // Set input content type\\\\\\\n        method.setRequestHeader(\"Content-Type\", \"text/raw\");\n        // Set response/output format\\\\\\\n        method.setRequestHeader(\"outputformat\", \"application/json\");\n\n        method.setRequestBody(news_body);\n\n        var client = new org.apache.commons.httpclient.HttpClient;\n\n        var returnCode = client.executeMethod(method);\n\n        var responseValue = \"\";\n\n        //    if (returnCode == org.apache.commons.httpclient.HttpStatus.SC_NOT_IMPLEMENTED) {\n        //     //  Do Something to capture response code\\\\\\\n        //      logger.warn(\"this is not working\");\n        //      doc.addField('version', 'untagged');\n        //  } else if (returnCode == org.apache.commons.httpclient.HttpStatus.SC_OK) {\n        // responseValue = method.getResponseBodyAsString();\n        //    doc.addField('version', 'v1');\n        //   } else {\n        //     //  Do Something to capture response code\\\\\\\n        //     logger.warn(\"this is not working\");\n        //     doc.addField('version', 'untagged');\n        //  }\n\n\n        if (returnCode > 200) {\n            //  Do Something to capture response code\\\\\\\n            logger.warn(\"this is not working\");\n            doc.addField('version', 'untagged');\n        } else if (returnCode == 200) {\n            responseValue = method.getResponseBodyAsString();\n            doc.addField('version', 'v1');\n        } else {\n            //  Do Something to capture response code\\\\\\\n            logger.warn(\"this is not working\");\n            doc.addField('version', 'untagged');\n        }\n\n        // remove single new bodies fields to sum them up in one \\\\\\\n        //doc.removeFields('news_body');\n        // doc.addField('news_body', news_body);\n\n        doc.addField('returnCode', returnCode);\n        doc.addField('responseValue', responseValue);\n\n    }\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-ALL-CONNECT",
            "secretSourceStageId": "hlugtlt778yy9o1or"
          },
          {
            "type": "javascript-index",
            "id": "2r0kyrb9r6ax7p66r",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n            ////////////////////////////\n            //Social Tags\n            ////////////////////////////\n\n            if (tag != null && tag.equals(\"socialTag\") && obj[0][allKeys[i]].forenduserdisplay.equals(\"true\")) {\n                if (obj[0][allKeys[i]].forenduserdisplay.equals(\"true\"))\n                    doc.addField('social_tags_ss', obj[0][allKeys[i]].name);\n                // doc.addField('entity_all_lv_s', obj[0][allKeys[i]].name);\n                if (obj[0][allKeys[i]].importance == 1) {\n                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_hv_ss', obj[0][allKeys[i]].name);\n\n                } else if (obj[0][allKeys[i]].importance == 2) {\n                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_mv_ss', obj[0][allKeys[i]].name);\n                } else if (obj[0][allKeys[i]].importance == 3) {\n                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('social_tags_lv_ss', obj[0][allKeys[i]].name);\n                }\n            }\n\n\n\n            ////////////////////////////\n            //Extract Entity Types\n            ////////////////////////////\n            if (type != null && tag != null && tag.equals(\"entities\")) {\n\n                if (type.equals(\"Company\")) {\n                    var companyScore = parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance);\n                    //  var companyScore = 0.5;\n                    doc.addField('entity_company_ss', obj[0][allKeys[i]].name);\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + companyScore);\n                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].name + '|' + companyScore);\n\n\n                    // logger.info(\"company has been added \" + obj[0][allKeys[i]].name + \" with a relevance score of \" + obj[0][allKeys[i]].relevance);\n                    if ((parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance) >= .6)) {\n                        // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].name);\n                        // doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_hv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n                        }\n                        // if the resolution isn't ana array\n                        if (obj[0][allKeys[i]].resolutions != null) {\n                            // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].name);\n                            // doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n\n\n\n\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].name);\n\n                              doc.addField('entity_company_numbers_hv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                  \n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n                                    doc.addField('entity_stock_ticker_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].primaryric + '|' + companyScore);\n\n                                }\n                                // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_hv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_company_commonname_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n                                  // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                  doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                  doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n\n                                  doc.addField('entity_company_numbers_hv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                    \n                                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                        doc.addField('entity_stock_ticker_hv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n\n                                    }\n                                    // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_hv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        // doc.addField('entity_company_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_company_commonname_hv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n\n\n                                    }\n                                }\n                            }\n                        }\n\n                    } else if (parseFloat(obj[0][allKeys[i]].confidencelevel) * parseFloat(obj[0][allKeys[i]].relevance) >= .4) {\n\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_mv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n\n                        }\n\n\n                        if (obj[0][allKeys[i]].resolutions != null) {\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                              doc.addField('entity_company_numbers_mv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                              \n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n\n                                  \n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_stock_ticker_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n\n                                }\n                                // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_mv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_company_commonname_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].commonname + '|' + companyScore);\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                        doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                        // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_company_numbers_mv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_stock_ticker_mv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                    }\n                                    // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_mv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        // doc.addField('entity_company_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_company_commonname_mv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n\n\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        //  doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].name);\n\n                        if (obj[0][allKeys[i]].resolutions === null) {\n                            doc.addField('entity_company_markup_lv_ss', obj[0][allKeys[i]].name);\n                            doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n                        }\n\n                        if (obj[0][allKeys[i]].resolutions != null) {\n\n                            if (!Array.isArray(obj[0][allKeys[i]].resolutions[0].primaryric)) {\n\n                              doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].name);\n                              // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                              doc.addField('entity_company_numbers_lv_txt', obj[0][allKeys[i]].resolutions[0].name + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score);\n\n\n                                if (obj[0][allKeys[i]].resolutions[0].primaryric != null) {\n                                  \n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_stock_ticker_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric);\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric + '|' + companyScore);\n                                }\n                                // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n                                doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].permid);\n\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n                                doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid + '|' + companyScore);\n\n                                if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                    // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n                                    doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname + '|' + companyScore);\n                                }\n                            } else {\n                                for (ff = 0; ff < obj[0][allKeys[i]].resolutions[0].primaryric.length; ++ff) {\n\n                                  doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n                                  doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].name[ff]);\n\n                                  doc.addField('entity_company_numbers_lv_txt', obj[0][allKeys[i]].resolutions[0].name[ff] + \" conf: \" + obj[0][allKeys[i]].confidencelevel + \" rel: \" + obj[0][allKeys[i]].relevance + \" count: \" + obj[0][allKeys[i]].instances.length + \" score: \" + obj[0][allKeys[i]].resolutions[0].score[ff]);\n\n\n                                    if (obj[0][allKeys[i]].resolutions[0].primaryric[ff] != null) {\n                                        // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n                                      \n                                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_stock_ticker_lv_ss', obj[0][allKeys[i]].resolutions[0].primaryric[ff]);\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].primaryric[ff] + '|' + companyScore);\n\n                                    }\n                                    // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n                                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n                                    doc.addField('entity_permid_lv_ss', obj[0][allKeys[i]].resolutions[0].permid[ff]);\n\n\n                                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n                                    doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].permid[ff] + '|' + companyScore);\n\n                                    if (obj[0][allKeys[i]].resolutions[0].commonname != null) {\n                                        // doc.addField('entity_company_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n                                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n                                        doc.addField('entity_company_commonname_lv_ss', obj[0][allKeys[i]].resolutions[0].commonname[ff]);\n\n\n                                        doc.addField('entity_all_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                        doc.addField('entity_company_payloads', obj[0][allKeys[i]].resolutions[0].commonname[ff] + '|' + companyScore);\n                                    }\n                                }\n                            }\n                            //still need to do this one this needs to be built out\n\n                        }\n                    }\n\n                } else if (type.equals(\"Country\")) {\n                    doc.addField('entity_country_ss', obj[0][allKeys[i]].name);\n                    //doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                    if (obj[0][allKeys[i]].relevance <= .2) {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n\n\n                        doc.addField('entity_country_lv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance < .2 && obj[0][allKeys[i]].relevance > .8) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_country_mv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance >= .8) {\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_country_hv_ss', obj[0][allKeys[i]].name);\n                    }\n                } else if (type.equals(\"Person\") || type.equals(\"Editor\") || type.equals(\"Journalist\")) {\n                    //  doc.addField('entity_person_ss', obj[0][allKeys[i]].name);\n\n                    doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                    if (obj[0][allKeys[i]].relevance <= .2) {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_person_lv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance < .2 && obj[0][allKeys[i]].relevance > .8) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_person_mv_ss', obj[0][allKeys[i]].name);\n                    } else if (obj[0][allKeys[i]].relevance >= .8) {\n                        doc.addField('entity_person_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    }\n                }\n            }\n        }\n    }\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-ENTITY-PARSER",
            "secretSourceStageId": "2r0kyrb9r6ax7p66r"
          },
          {
            "type": "javascript-index",
            "id": "6ym6jkmn6cd6lxr",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n   var obj;\n    try {\n      obj = JSON.parse(responseValue);\n    } catch(err) {\n      doc.setField(\"version\", \"untagged\");\n      return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n            //logger.warn('test1234');\n            //if social tags\\\n\n            ////////////////////////////\n            //Extract Entity Types\n            ////////////////////////////\n\n            if (type != null && tag != null && tag.equals(\"relations\")) {\n                //Reject -, , , , , CompanyAffiliates, ,,,,,,, , ,, ,,, , , CompanyTicker,, , , , ,,, , ,,, , , , , , FDAPhase, , ,,, ,, , , , ,,, , , , , , , , , , , , ,,,, Quotation, ,,\n                if (!obj[0][allKeys[i]]._type.equals(\"Quotation\") && !obj[0][allKeys[i]]._type.equals(\"Company Affiliates\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTicker\") && !obj[0][allKeys[i]]._type.equals(\"CompanyLocation\") && !obj[0][allKeys[i]]._type.equals(\"FDAPhase\") && !obj[0][allKeys[i]]._type.equals(\"PersonCareer\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTicker\") && !obj[0][allKeys[i]]._type.equals(\"ArmedAttack\") && !obj[0][allKeys[i]]._type.equals(\"ArmsPurchaseSale\") && !obj[0][allKeys[i]]._type.equals(\"Arrest\") && !obj[0][allKeys[i]]._type.equals(\"CandidatePosition\") && !obj[0][allKeys[i]]._type.equals(\"CompanyAccountingChange\") && !obj[0][allKeys[i]]._type.equals(\"CompanyEmployeesNumber\") && !obj[0][allKeys[i]]._type.equals(\"CompanyListingChange\") && !obj[0][allKeys[i]]._type.equals(\"CompanyFounded\") && !obj[0][allKeys[i]]._type.equals(\"CompanyFounded\") && !obj[0][allKeys[i]]._type.equals(\"CompanyLocation\") && !obj[0][allKeys[i]]._type.equals(\"CompanyRestatement\") && !obj[0][allKeys[i]]._type.equals(\"CompanyTechnology\") && !obj[0][allKeys[i]]._type.equals(\"ContactDetails\") && !obj[0][allKeys[i]]._type.equals(\"Conviction\") && !obj[0][allKeys[i]]._type.equals(\"CreditRating\") && !obj[0][allKeys[i]]._type.equals(\"DelayedFiling\") && !obj[0][allKeys[i]]._type.equals(\"DiplomaticRelations\") && !obj[0][allKeys[i]]._type.equals(\"EmploymentRelation\") && !obj[0][allKeys[i]]._type.equals(\"EnvironmentalIssue\") && !obj[0][allKeys[i]]._type.equals(\"Extinction\") && !obj[0][allKeys[i]]._type.equals(\"FamilyRelation\") && !obj[0][allKeys[i]]._type.equals(\"IndicesChanges\") && !obj[0][allKeys[i]]._type.equals(\"Indictment\") && !obj[0][allKeys[i]]._type.equals(\"ManMadeDisaster\") && !obj[0][allKeys[i]]._type.equals(\"MilitaryAction\") && !obj[0][allKeys[i]]._type.equals(\"MovieRelease\") && !obj[0][allKeys[i]]._type.equals(\"MusicAlbumRelease\") && !obj[0][allKeys[i]]._type.equals(\"NaturalDisaster\") && !obj[0][allKeys[i]]._type.equals(\"PersonAttributes\") && !obj[0][allKeys[i]]._type.equals(\"PersonCareer\") && !obj[0][allKeys[i]]._type.equals(\"PersonCommunication\") && !obj[0][allKeys[i]]._type.equals(\"PersonEducation\") && !obj[0][allKeys[i]]._type.equals(\"PersonEmailAddress\") && !obj[0][allKeys[i]]._type.equals(\"PersonLocation\") && !obj[0][allKeys[i]]._type.equals(\"PersonParty\") && !obj[0][allKeys[i]]._type.equals(\"PersonRelation\") && !obj[0][allKeys[i]]._type.equals(\"PersonTravel\") && !obj[0][allKeys[i]]._type.equals(\"PoliticalEndorsement\") && !obj[0][allKeys[i]]._type.equals(\"PoliticalRelationship\") && !obj[0][allKeys[i]]._type.equals(\"PollsResult\") && !obj[0][allKeys[i]]._type.equals(\"SecondaryIssuance\") && !obj[0][allKeys[i]]._type.equals(\"Trial\") && !obj[0][allKeys[i]]._type.equals(\"VotingResult\")) {\n                    doc.addField('relation_event_ss', obj[0][allKeys[i]]._type);\n                    var ref = \"\"\n                    var ref1 = \"\"\n                    var double_take = false;\n                    ref = obj[0][allKeys[i]].company\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].company_rated\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].acquirer\n                    if ((typeof ref == 'undefined'))\n                        ref = obj[0][allKeys[i]].company_investigated\n                    if ((typeof ref == 'undefined')) {\n                        ref = obj[0][allKeys[i]].company_acquirer\n                        if (obj[0][allKeys[i]].company_beingacquired != null) {\n                            ref1 = obj[0][allKeys[i]].company_beingacquired\n                            double_take = true;\n                        }\n                    }\n\n                    if (ref != null && obj[0][ref] != null) {\n                        // doc.addField('entity_first_ss', Array.isArray(ref))\n                        if (Array.isArray(ref) == true) {\n                            for (k = 0; k < ref.length; ++k) {\n                                doc.addField('Company_Events_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('company_events_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n                                doc.addField('entity_all_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                                var refKScores = parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance);\n\n                                if ((parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance) >= .6)) {\n\n                                    doc.addField('entity_all_hv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    // if the company can be resolved add its url,and perm id for the typeahead and confidance ranking\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_hv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_hv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                    }\n\n                                } else if ((parseFloat(obj[0][ref[k]].confidencelevel) * parseFloat(obj[0][ref[k]].relevance) >= .4)) {\n                                    doc.addField('entity_all_mv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_mv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_mv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n\n                                    }\n\n                                } else {\n                                    doc.addField('entity_all_lv_ss', obj[0][ref[k]].name + \" \" + obj[0][allKeys[i]]._type);\n                                    if (obj[0][ref[k]].resolutions != null) {\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('event_support_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_lv_ss', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                        doc.addField('entity_all_lv_ss', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        // doc.addField('event_support_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + obj[0][ref[k]].relevance);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n                                        doc.addField('entity_all_payloads', obj[0][ref[k]].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refKScores);\n\n                                    }\n                                }\n                            }\n\n\n                        } else {\n\n\n                            doc.addField('Company_Events_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                            doc.addField('event_support_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                            var refScore = parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance);\n\n                            if ((parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance) >= .6)) {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_hv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            } else if ((parseFloat(obj[0][ref].confidencelevel) * parseFloat(obj[0][ref].relevance) >= .4)) {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_mv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            } else {\n                                doc.addField('entity_all_hv_ss', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                doc.addField('entity_all_payloads', obj[0][ref].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                if (double_take) {\n                                    // add the company even if the display is off\n                                    //      doc.addField('entity_company_ss', obj[0][ref1].name);\n                                    //  doc.addField('entity_first1_ss', ref1 +\" _ \"+obj[0][allKeys[i]]._type );\n                                    doc.addField('Company_Events_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref1].name + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                                if (obj[0][ref].resolutions != null) {\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('event_support_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type);\n                                    doc.addField('entity_all_lv_ss', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type);\n\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].permid + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n                                    doc.addField('entity_all_payloads', obj[0][ref].resolutions[0].primaryric + \" \" + obj[0][allKeys[i]]._type + '|' + refScore);\n\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n    // doc.removeFields(\"responseValue\");\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-EVENT-PARSER",
            "secretSourceStageId": "6ym6jkmn6cd6lxr"
          },
          {
            "type": "javascript-index",
            "id": "ar6aukm3jqvj3v7vi",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n\n\n            if (tag != null && tag.equals(\"industry\")) {\n                doc.addField('industry_tags_ss', obj[0][allKeys[i]].name);\n\n                doc.addField('industry_tags_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].relevance);\n\n                if (parseFloat(obj[0][allKeys[i]].relevance) >= .8) {\n                    doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_hv_ss', obj[0][allKeys[i]].name);\n                } else if (parseFloat(obj[0][allKeys[i]].relevance) >= .5) {\n                    doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_mv_ss', obj[0][allKeys[i]].name);\n\n                } else {\n                    doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                    doc.addField('industry_tags_lv_ss', obj[0][allKeys[i]].name);\n                }\n            }\n\n\n        }\n    }\n\n    return doc;\n}",
            "skip": false,
            "label": "TRIT-INDUSTRY-PARSER",
            "secretSourceStageId": "ar6aukm3jqvj3v7vi"
          },
          {
            "type": "javascript-index",
            "id": "cgbzduui1y993haor",
            "script": "function(doc) {\n\n    var responseValue = doc.getFieldValues('responseValue');\n\n    var obj;\n    try {\n        obj = JSON.parse(responseValue);\n    } catch (err) {\n        doc.setField(\"version\", \"untagged\");\n        return doc;\n    }\n\n    if (obj == null || (typeof obj == 'undefined') || (typeof obj[0] == 'undefined'))\n        return doc;\n\n    // array to store the name of companies\\\n    var companies = [];\n    // array to store the name of thier respective permids\\\n    var comp_permids = \"\";\n\n    // Get all the Key in the response\\\n    var allKeys = Object.keys(obj[0]);\n\n    // doc.addField('Field Val', Object.keys(obj[0]));\\\n\n    if (allKeys != null) {\n\n        for (i = 0; i < allKeys.length; ++i) {\n\n            tag = obj[0][allKeys[i]]._typeGroup;\n            type = obj[0][allKeys[i]]._type;\n\n            if (tag != null && tag.equals(\"topics\")) {\n                if (obj[0][allKeys[i]].rcscode != null) {\n\n                    doc.addField('topics_tags_ss', obj[0][allKeys[i]].name);\n                    doc.addField('topics_tags_payloads', obj[0][allKeys[i]].name + '|' + obj[0][allKeys[i]].score);\n\n                    if (parseFloat(obj[0][allKeys[i]].score) >= .8) {\n                        doc.addField('entity_all_hv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_hv_ss', obj[0][allKeys[i]].name);\n                    } else if (parseFloat(obj[0][allKeys[i]].score) >= .5) {\n                        doc.addField('entity_all_mv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_mv_ss', obj[0][allKeys[i]].name);\n                    } else {\n                        doc.addField('entity_all_lv_ss', obj[0][allKeys[i]].name);\n                        doc.addField('topics_tags_lv_ss', obj[0][allKeys[i]].name);\n                    }\n                }\n            }\n        }\n    }\n\n    return doc;\n}\n",
            "skip": false,
            "label": "TRIT-TOPICS-PARSER",
            "secretSourceStageId": "cgbzduui1y993haor"
          },
          {
            "type": "field-mapping",
            "id": "kuz4r89n32jll3di",
            "mappings": [
              {
                "source": "entity_company_mv_ss",
                "target": "entity_company_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_company_hv_ss",
                "target": "entity_company_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_company_lv_ss",
                "target": "entity_company_lv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_hv_ss",
                "target": "entity_person_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_mv_ss",
                "target": "entity_person_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_person_lv_ss",
                "target": "entity_person_lv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_hv_ss",
                "target": "industry_tags_hv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_mv_ss",
                "target": "industry_tags_mv_txt",
                "operation": "copy"
              },
              {
                "source": "industry_tags_lv_ss",
                "target": "industry_tags_lv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_hv_ss",
                "target": "social_tags_hv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_mv_ss",
                "target": "social_tags_mv_txt",
                "operation": "copy"
              },
              {
                "source": "social_tags_lv_ss",
                "target": "social_tags_lv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_hv_ss",
                "target": "entity_all_hv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_mv_ss",
                "target": "entity_all_mv_txt",
                "operation": "copy"
              },
              {
                "source": "entity_all_lv_ss",
                "target": "entity_all_lv_txt",
                "operation": "copy"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "SEARCH-FIELDS-SETUP",
            "secretSourceStageId": "kuz4r89n32jll3di"
          },
          {
            "type": "field-mapping",
            "id": "2w6q6nr98gar79zfr",
            "mappings": [
              {
                "source": "entity_all_mv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_all_hv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_all_lv_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              },
              {
                "source": "entity_support_ss",
                "target": "entity_suggest_ss",
                "operation": "copy"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "Autocomplete",
            "secretSourceStageId": "2w6q6nr98gar79zfr"
          },
          {
            "type": "solr-index",
            "id": "77fcf2a6-50fb-43c1-8b62-184b5954c934",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "77fcf2a6-50fb-43c1-8b62-184b5954c934"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "TRIT-ALL-PAYLOAD"
        }
      },
      {
        "id": "finance-default",
        "stages": [
          {
            "type": "indexing-rpc",
            "id": "dz5ayj46vg4wh4cxr",
            "mappingRules": [],
            "debug": true,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/datasources",
              "method": "post",
              "queryParams": {},
              "headers": {
                "Content-Type": "application/json"
              },
              "entity": "{     \"id\": \"${Symbol}-press-release\",     \"created\": \"2017-04-06T19:46:13.133Z\",     \"modified\": \"2017-04-06T19:46:13.133Z\",     \"connector\": \"lucid.anda\",     \"type\": \"web\",     \"pipeline\": \"stock-press-release\",     \"parserId\": \"default\",     \"properties\": {       \"refreshOlderThan\": -1,       \"emitThreads\": 5,       \"diagnosticMode\": false,       \"f.appendTrailingSlashToLinks\": false,       \"f.selectorFields\": [         \"time[datetime]\"       ],       \"refreshErrors\": false,       \"restrictToTreeIgnoredHostPrefixes\": [         \"www.\"       ],       \"dedupeSaveSignature\": false,       \"crawlDBType\": \"in-memory\",       \"delete\": true,       \"initial_mapping\": {         \"mappings\": [           {             \"source\": \"charSet\",             \"target\": \"charSet_s\",             \"operation\": \"move\"           },           {             \"source\": \"fetchedDate\",             \"target\": \"fetchedDate_dt\",             \"operation\": \"move\"           },           {             \"source\": \"lastModified\",             \"target\": \"lastModified_dt\",             \"operation\": \"move\"           },           {             \"source\": \"signature\",             \"target\": \"dedupeSignature_s\",             \"operation\": \"move\"           },           {             \"source\": \"contentSignature\",             \"target\": \"signature_s\",             \"operation\": \"move\"           },           {             \"source\": \"length\",             \"target\": \"length_l\",             \"operation\": \"move\"           },           {             \"source\": \"mimeType\",             \"target\": \"mimeType_s\",             \"operation\": \"move\"           },           {             \"source\": \"parent\",             \"target\": \"parent_s\",             \"operation\": \"move\"           },           {             \"source\": \"owner\",             \"target\": \"owner_s\",             \"operation\": \"move\"           },           {             \"source\": \"group\",             \"target\": \"group_s\",             \"operation\": \"move\"           }         ],         \"reservedFieldsMappingAllowed\": false,         \"skip\": false,         \"id\": \"FromMap\",         \"label\": \"field-mapping\",         \"type\": \"field-mapping\"       },       \"f.discardLinkURLQueries\": false,       \"fetchDelayMS\": 10,       \"f.respectMetaEquivRedirects\": false,       \"restrictToTreeUseHostAndPath\": false,       \"refreshAll\": true,       \"f.defaultMIMEType\": \"application/octet-stream\",       \"f.filteringRootTags\": [         \"body\",         \"head\"       ],       \"startLinks\": [         \"http://finance.yahoo.com/quote/${Symbol}\"       ],       \"failFastOnStartLinkFailure\": true,       \"f.timeoutMS\": 10000,       \"restrictToTreeAllowSubdomains\": false,       \"maxItems\": 50,       \"trackEmbeddedIDs\": true,       \"f.scrapeLinksBeforeFiltering\": false,       \"dedupe\": false,       \"chunkSize\": 50,       \"includeRegexes\": [         \"http://finance.yahoo.com/news/.*\",         \"http://finance.yahoo.com/quote/${Symbol}.*\"       ],       \"f.allowAllCertificates\": false,       \"f.obeyRobotsDelay\": true,       \"collection\": \"finance\",       \"deleteErrorsAfter\": -1,       \"f.userAgentName\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",       \"forceRefresh\": false,       \"retryEmit\": true,       \"depth\": 2,       \"f.obeyRobots\": true,       \"f.cookieSpec\": \"browser-compatibility\",       \"f.maxSizeBytes\": 41943040,       \"refreshStartLinks\": false,       \"aliasExpiration\": 1,       \"fetchDelayMSPerHost\": true,       \"fetchThreads\": 1,       \"indexCrawlDBToSolr\": false,       \"restrictToTree\": true,       \"retainOutlinks\": true,       \"f.defaultCharSet\": \"UTF-8\"     }   }"
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc-press-release",
            "condition": "doc.getFirstFieldValue(\"Symbol\") != null",
            "secretSourceStageId": "dz5ayj46vg4wh4cxr"
          },
          {
            "type": "indexing-rpc",
            "id": "wr45zwb3gbw4xtj4i",
            "mappingRules": [],
            "debug": true,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/datasources",
              "method": "post",
              "queryParams": {},
              "headers": {
                "Content-Type": "application/json"
              },
              "entity": "{     \"id\": \"${Symbol}-historical\",     \"created\": \"2017-04-06T19:46:13.133Z\",     \"modified\": \"2017-04-06T19:46:13.133Z\",     \"connector\": \"lucid.anda\",     \"type\": \"web\",     \"pipeline\": \"stock-history\",     \"parserId\": \"default\",     \"properties\": {       \"refreshOlderThan\": -1,       \"emitThreads\": 5,       \"diagnosticMode\": false,       \"f.appendTrailingSlashToLinks\": false,       \"refreshErrors\": false,       \"restrictToTreeIgnoredHostPrefixes\": [         \"www.\"       ],       \"dedupeSaveSignature\": false,       \"crawlDBType\": \"in-memory\",       \"delete\": true,       \"initial_mapping\": {         \"mappings\": [           {             \"source\": \"charSet\",             \"target\": \"charSet_s\",             \"operation\": \"move\"           },           {             \"source\": \"fetchedDate\",             \"target\": \"fetchedDate_dt\",             \"operation\": \"move\"           },           {             \"source\": \"lastModified\",             \"target\": \"lastModified_dt\",             \"operation\": \"move\"           },           {             \"source\": \"signature\",             \"target\": \"dedupeSignature_s\",             \"operation\": \"move\"           },           {             \"source\": \"contentSignature\",             \"target\": \"signature_s\",             \"operation\": \"move\"           },           {             \"source\": \"length\",             \"target\": \"length_l\",             \"operation\": \"move\"           },           {             \"source\": \"mimeType\",             \"target\": \"mimeType_s\",             \"operation\": \"move\"           },           {             \"source\": \"parent\",             \"target\": \"parent_s\",             \"operation\": \"move\"           },           {             \"source\": \"owner\",             \"target\": \"owner_s\",             \"operation\": \"move\"           },           {             \"source\": \"group\",             \"target\": \"group_s\",             \"operation\": \"move\"           }         ],         \"reservedFieldsMappingAllowed\": false,         \"skip\": false,         \"id\": \"Anda\",         \"label\": \"field-mapping\",         \"type\": \"field-mapping\"       },       \"f.discardLinkURLQueries\": false,       \"fetchDelayMS\": 0,       \"f.respectMetaEquivRedirects\": false,       \"restrictToTreeUseHostAndPath\": false,       \"refreshAll\": true,       \"f.defaultMIMEType\": \"application/octet-stream\",       \"f.filteringRootTags\": [         \"body\",         \"head\"       ],       \"startLinks\": [         \"http://ichart.finance.yahoo.com/table.csv?s=${Symbol}&ignore=.csv\"       ],       \"failFastOnStartLinkFailure\": true,       \"f.timeoutMS\": 10000,       \"restrictToTreeAllowSubdomains\": false,       \"maxItems\": 1,       \"trackEmbeddedIDs\": true,       \"f.scrapeLinksBeforeFiltering\": false,       \"dedupe\": false,       \"chunkSize\": 50,       \"f.allowAllCertificates\": false,       \"f.obeyRobotsDelay\": true,       \"collection\": \"finance\",       \"deleteErrorsAfter\": -1,       \"f.userAgentName\": \"Lucidworks-Anda/2.0\",       \"forceRefresh\": false,       \"retryEmit\": true,       \"depth\": -1,       \"f.obeyRobots\": true,       \"f.cookieSpec\": \"browser-compatibility\",       \"f.maxSizeBytes\": 41943040,       \"refreshStartLinks\": false,       \"aliasExpiration\": 1,       \"fetchDelayMSPerHost\": true,       \"fetchThreads\": 1,       \"indexCrawlDBToSolr\": false,       \"restrictToTree\": true,       \"retainOutlinks\": true,       \"f.defaultCharSet\": \"UTF-8\"     }   }"
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc",
            "condition": "doc.getFirstFieldValue(\"Symbol\") != null",
            "secretSourceStageId": "wr45zwb3gbw4xtj4i"
          },
          {
            "type": "field-mapping",
            "id": "177a165d-1b57-4354-b5fe-c6a19af21936",
            "mappings": [],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "label": "field-mapping",
            "secretSourceStageId": "177a165d-1b57-4354-b5fe-c6a19af21936"
          },
          {
            "type": "solr-index",
            "id": "8edcabc0-56cf-4a1d-9822-2596fd5ac6da",
            "enforceSchema": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "skip": false,
            "label": "solr-index",
            "secretSourceStageId": "8edcabc0-56cf-4a1d-9822-2596fd5ac6da"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "finance-default"
        }
      },
      {
        "id": "start-crawlers",
        "stages": [
          {
            "type": "indexing-rpc",
            "id": "scjn6egzi7r7c4bo6r",
            "mappingRules": [],
            "debug": false,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/jobs/${Symbol}-press-release",
              "method": "post",
              "queryParams": {},
              "headers": {}
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc",
            "secretSourceStageId": "scjn6egzi7r7c4bo6r"
          },
          {
            "type": "indexing-rpc",
            "id": "d53ppjq83ct2zkt9",
            "mappingRules": [],
            "debug": false,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/jobs/${Symbol}-historical",
              "method": "post",
              "queryParams": {},
              "headers": {}
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc",
            "secretSourceStageId": "d53ppjq83ct2zkt9"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "start-crawlers"
        }
      },
      {
        "id": "delete-datasources",
        "stages": [
          {
            "type": "indexing-rpc",
            "id": "u1ivk8x0dmoq1tt9",
            "mappingRules": [],
            "debug": false,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/datasources/${Symbol}-press-release",
              "method": "delete",
              "queryParams": {},
              "headers": {}
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc",
            "condition": "doc.getFirstFieldValue(\"Symbol\") != null",
            "secretSourceStageId": "u1ivk8x0dmoq1tt9"
          },
          {
            "type": "indexing-rpc",
            "id": "5sgugoe8l8v8fflxr",
            "mappingRules": [],
            "debug": false,
            "params": {
              "uri": "http://localhost:8984/connectors/v1/connectors/datasources/${Symbol}-historical",
              "method": "delete",
              "queryParams": {},
              "headers": {}
            },
            "hasNoSideEffects": false,
            "skip": false,
            "label": "indexing-rpc",
            "condition": "doc.getFirstFieldValue(\"Symbol\") != null",
            "secretSourceStageId": "5sgugoe8l8v8fflxr"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "delete-datasources"
        }
      }
    ],
    "queryPipelines": [
      {
        "id": "system_blobs-default",
        "stages": [
          {
            "type": "recommendation",
            "id": "7f407367-dca3-4848-be95-d5362867e7a1",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "7f407367-dca3-4848-be95-d5362867e7a1"
          },
          {
            "type": "search-fields",
            "id": "e50a349d-6275-43ac-badd-4a543319a96f",
            "rows": 10,
            "start": 0,
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "e50a349d-6275-43ac-badd-4a543319a96f"
          },
          {
            "type": "facet",
            "id": "d8c7dcac-d51f-453c-b90d-7a5dc1a64614",
            "fieldFacets": [],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "d8c7dcac-d51f-453c-b90d-7a5dc1a64614"
          },
          {
            "type": "solr-query",
            "id": "d8aae231-06fc-4ff6-823e-7d336fdda066",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "d8aae231-06fc-4ff6-823e-7d336fdda066"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "system_blobs-default"
        }
      },
      {
        "id": "related-items",
        "stages": [
          {
            "type": "more-like-this",
            "id": "4c88c22a-8a56-467b-a880-c1ab8e473e30",
            "moreLikeThisFields": [],
            "useQueryParser": true,
            "mindf": 2,
            "maxdf": 10000,
            "minwl": 3,
            "docId": "id",
            "skip": false,
            "label": "more-like-this",
            "secretSourceStageId": "4c88c22a-8a56-467b-a880-c1ab8e473e30"
          },
          {
            "type": "solr-query",
            "id": "e84accac-cf60-4f56-b78e-dde21d5d73b8",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "e84accac-cf60-4f56-b78e-dde21d5d73b8"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "related-items"
        }
      },
      {
        "id": "default",
        "stages": [
          {
            "type": "recommendation",
            "id": "4d840c93-f8fb-4c0b-aa90-c1a0e86d24d7",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "4d840c93-f8fb-4c0b-aa90-c1a0e86d24d7"
          },
          {
            "type": "search-fields",
            "id": "92f0f3a0-05d0-4f4a-832d-919fba9ee4ed",
            "rows": 10,
            "start": 0,
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "92f0f3a0-05d0-4f4a-832d-919fba9ee4ed"
          },
          {
            "type": "facet",
            "id": "b007f67b-f627-4130-9763-1bc9bead2eaa",
            "fieldFacets": [],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "b007f67b-f627-4130-9763-1bc9bead2eaa"
          },
          {
            "type": "solr-query",
            "id": "6dc7116d-a31a-48dd-853a-d0cb178b9e6b",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "6dc7116d-a31a-48dd-853a-d0cb178b9e6b"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "default"
        }
      },
      {
        "id": "_system",
        "stages": [
          {
            "type": "solr-query",
            "id": "3c3043f5-978d-46fa-bb88-59992e8277bf",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "3c3043f5-978d-46fa-bb88-59992e8277bf"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "_system"
        }
      },
      {
        "id": "default_signals-default",
        "stages": [
          {
            "type": "recommendation",
            "id": "e72e550d-3671-4d17-ba4e-e154a9ce4dc8",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "e72e550d-3671-4d17-ba4e-e154a9ce4dc8"
          },
          {
            "type": "search-fields",
            "id": "b5d7c025-96a8-4edb-8789-323f2bdd29a9",
            "rows": 10,
            "start": 0,
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "b5d7c025-96a8-4edb-8789-323f2bdd29a9"
          },
          {
            "type": "facet",
            "id": "31e4c46a-7d7b-4957-affe-3ff1d3a59e4c",
            "fieldFacets": [],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "31e4c46a-7d7b-4957-affe-3ff1d3a59e4c"
          },
          {
            "type": "solr-query",
            "id": "c73a88ab-2416-45d1-9f33-3037ff1b15ea",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "c73a88ab-2416-45d1-9f33-3037ff1b15ea"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "default_signals-default"
        }
      },
      {
        "id": "finance-default",
        "stages": [
          {
            "type": "recommendation",
            "id": "02a1c268-628b-4ca3-bd29-099f968a78d9",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "02a1c268-628b-4ca3-bd29-099f968a78d9"
          },
          {
            "type": "search-fields",
            "id": "3599d04c-a52f-4fb4-bfc6-0f1128501c49",
            "rows": 10,
            "start": 0,
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "3599d04c-a52f-4fb4-bfc6-0f1128501c49"
          },
          {
            "type": "facet",
            "id": "336146f1-2304-4a73-a43e-6aedcc6fdfd9",
            "fieldFacets": [
              {
                "field": "_lw_data_source_s",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_all_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_company_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_permid_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_person_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_stock_ticker_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "Company_Events_ss",
                "minCount": 1,
                "missing": false
              }
            ],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "336146f1-2304-4a73-a43e-6aedcc6fdfd9",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "type": "solr-query",
            "id": "3ed1b2e8-06fe-4f62-a564-3a697ee16672",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "3ed1b2e8-06fe-4f62-a564-3a697ee16672"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "finance-default"
        }
      },
      {
        "id": "_lw_qwb_tmp_8580519830739111",
        "stages": [
          {
            "type": "recommendation",
            "id": "02a1c268-628b-4ca3-bd29-099f968a78d9",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "02a1c268-628b-4ca3-bd29-099f968a78d9"
          },
          {
            "type": "search-fields",
            "id": "3599d04c-a52f-4fb4-bfc6-0f1128501c49",
            "rows": 10,
            "start": 0,
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "3599d04c-a52f-4fb4-bfc6-0f1128501c49"
          },
          {
            "type": "facet",
            "id": "336146f1-2304-4a73-a43e-6aedcc6fdfd9",
            "fieldFacets": [
              {
                "field": "_lw_data_source_s",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_all_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_company_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_permid_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_person_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_stock_ticker_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "Company_Events_ss",
                "minCount": 1,
                "missing": false
              }
            ],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "336146f1-2304-4a73-a43e-6aedcc6fdfd9",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "type": "solr-query",
            "id": "3ed1b2e8-06fe-4f62-a564-3a697ee16672",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "3ed1b2e8-06fe-4f62-a564-3a697ee16672"
          }
        ],
        "properties": {
          "lastModified": "1492814985",
          "forSimulation": "true",
          "secretSourcePipelineId": "_lw_qwb_tmp_8580519830739111"
        }
      },
      {
        "id": "latest-news",
        "stages": [
          {
            "type": "recommendation",
            "id": "d946dc95-9283-4156-ba30-5b0c009f2e34",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "*",
            "boostId": "id",
            "skip": false,
            "label": "recommendation",
            "secretSourceStageId": "d946dc95-9283-4156-ba30-5b0c009f2e34"
          },
          {
            "type": "search-fields",
            "id": "5550c833-bc59-4bb2-98e7-b30b33b2d555",
            "rows": 10,
            "start": 0,
            "sort": "time_datetime_ desc",
            "queryFields": [],
            "returnFields": [
              "*",
              "score"
            ],
            "skip": false,
            "label": "search-fields",
            "secretSourceStageId": "5550c833-bc59-4bb2-98e7-b30b33b2d555"
          },
          {
            "type": "facet",
            "id": "b71dd608-9721-43bb-abdf-35023e94212d",
            "fieldFacets": [
              {
                "field": "Company_Events_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_country_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_company_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "entity_person_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "industry_tags_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "topics_tags_hv_ss",
                "minCount": 1,
                "missing": false
              },
              {
                "field": "event_support_ss",
                "minCount": 1,
                "missing": false
              }
            ],
            "skip": false,
            "label": "facet",
            "secretSourceStageId": "b71dd608-9721-43bb-abdf-35023e94212d"
          },
          {
            "type": "solr-query",
            "id": "08112dc2-a650-4a0c-a54e-35166e37b12d",
            "allowedRequestHandlers": [],
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "skip": false,
            "label": "solr-query",
            "secretSourceStageId": "08112dc2-a650-4a0c-a54e-35166e37b12d"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "latest-news"
        }
      }
    ],
    "searchClusters": [
      {
        "id": "default",
        "connectString": "localhost:9983/lwfusion/3.0.1/solr",
        "zkClientTimeout": 30000,
        "zkConnectTimeout": 60000,
        "cloud": true,
        "bufferFlushInterval": 1000,
        "bufferSize": 100,
        "concurrency": 10,
        "validateCluster": true
      }
    ],
    "schedules": [
      {
        "id": "hourlyMetricsRollup-gauges",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.240Z",
        "startTime": "2017-04-04T15:04:16.240Z",
        "repeatUnit": "HOUR",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/hourlyMetricsRollup-gauges",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "dailyMetricsRollup-meters",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.327Z",
        "startTime": "2017-04-04T15:04:16.327Z",
        "repeatUnit": "DAY",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/dailyMetricsRollup-meters",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "click-signals-default",
        "creatorType": "system",
        "creatorId": "SignalResource_$$_jvstb9b_a",
        "createTime": "2017-04-10T13:54:24.158Z",
        "startTime": "2017-04-10T13:54:24.158Z",
        "repeatUnit": "MINUTE",
        "interval": 2,
        "active": true,
        "callParams": {
          "uri": "service://aggregator/jobs/default_signals/click-signals-default",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "dailyMetricsRollup-timers",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.341Z",
        "startTime": "2017-04-04T15:04:16.341Z",
        "repeatUnit": "DAY",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/dailyMetricsRollup-timers",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "dailyMetricsRollup-histograms",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.314Z",
        "startTime": "2017-04-04T15:04:16.314Z",
        "repeatUnit": "DAY",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/dailyMetricsRollup-histograms",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "dailyMetricsRollup-gauges",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.300Z",
        "startTime": "2017-04-04T15:04:16.300Z",
        "repeatUnit": "DAY",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/dailyMetricsRollup-gauges",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "hourlyMetricsRollup-timers",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.272Z",
        "startTime": "2017-04-04T15:04:16.272Z",
        "repeatUnit": "HOUR",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/hourlyMetricsRollup-timers",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "hourlyMetricsRollup-histograms",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.250Z",
        "startTime": "2017-04-04T15:04:16.250Z",
        "repeatUnit": "HOUR",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/hourlyMetricsRollup-histograms",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "delete-old-metrics",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.358Z",
        "startTime": "2017-04-04T15:04:16.358Z",
        "repeatUnit": "WEEK",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "solr://system_metrics/update",
          "method": "get",
          "queryParams": {
            "wt": "json",
            "stream.body": "<delete><query>timestamp_tdt:[* TO NOW-13MONTHS]</query></delete>"
          },
          "headers": {}
        }
      },
      {
        "id": "dailyMetricsRollup-counters",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.285Z",
        "startTime": "2017-04-04T15:04:16.285Z",
        "repeatUnit": "DAY",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/dailyMetricsRollup-counters",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "delete-old-audit-logs",
        "creatorType": "system",
        "creatorId": "DefaultAuditLogCleanupScheduleRegistrar",
        "createTime": "2017-04-04T15:00:37.813Z",
        "startTime": "2017-04-04T15:00:37.813Z",
        "repeatUnit": "MONTH",
        "interval": 1,
        "active": true,
        "callParams": {
          "uri": "solr://audit_logs/update",
          "method": "get",
          "queryParams": {
            "wt": "json",
            "stream.body": "<delete><query>timestamp_tdt:[* TO NOW-30DAYS] OR timestamp_dt:[* TO NOW-30DAYS]</query></delete>"
          },
          "headers": {}
        }
      },
      {
        "id": "hourlyMetricsRollup-counters",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.228Z",
        "startTime": "2017-04-04T15:04:16.228Z",
        "repeatUnit": "HOUR",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/hourlyMetricsRollup-counters",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "hourlyMetricsRollup-meters",
        "creatorType": "system",
        "creatorId": "MetricSchedulesRegistrar",
        "createTime": "2017-04-04T15:04:16.259Z",
        "startTime": "2017-04-04T15:04:16.259Z",
        "repeatUnit": "HOUR",
        "interval": 1,
        "active": false,
        "callParams": {
          "uri": "service://aggregator/jobs/system_metrics/hourlyMetricsRollup-meters",
          "method": "post",
          "queryParams": {},
          "headers": {}
        }
      },
      {
        "id": "delete-old-logs",
        "creatorType": "system",
        "creatorId": "DefaultLogCleanupScheduleRegistrar",
        "createTime": "2017-04-04T15:00:19.659Z",
        "startTime": "2017-04-04T15:00:19.659Z",
        "repeatUnit": "MONTH",
        "interval": 1,
        "active": true,
        "callParams": {
          "uri": "solr://logs/update",
          "method": "get",
          "queryParams": {
            "wt": "json",
            "stream.body": "<delete><query>timestamp_tdt:[* TO NOW-30DAYS] OR timestamp_dt:[* TO NOW-30DAYS]</query></delete>"
          },
          "headers": {}
        }
      }
    ],
    "aggregations": [
      {
        "id": "hourlyMetricsRollup-gauges",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "gauge"
        ],
        "selectQuery": "value_d:*",
        "timeRange": "[NOW-1MONTH TO NOW-1DAY]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "value_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "value_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "value_d"
            ],
            "targetField": "mean_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "count",
            "sourceFields": [
              "value_d"
            ],
            "targetField": "count_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "value_d"
            ],
            "targetField": "sum_d",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "dailyMetricsRollup-meters",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "meter"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-13MONTHS TO NOW-1MONTH]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_mean_rate_d"
            ],
            "targetField": "mean_mean_rate_d",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "click-signals-default",
        "groupingFields": [
          "query_s",
          "doc_id_s",
          "filters_s"
        ],
        "signalTypes": [
          "click"
        ],
        "selectQuery": "*:*",
        "outputPipeline": "_system",
        "rollupPipeline": "_system",
        "rollupAggregator": "click",
        "aggregator": "click",
        "sourceRemove": false,
        "sourceCatchup": true,
        "outputRollup": true,
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "dailyMetricsRollup-gauges",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "gauge"
        ],
        "selectQuery": "value_d:*",
        "timeRange": "[NOW-13MONTHS TO NOW-1MONTH]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "expr",
            "sourceFields": [
              "mean_d",
              "count_d",
              "sum_d"
            ],
            "targetField": "mean_d",
            "mapper": false,
            "parameters": [
              {
                "key": "associative",
                "value": "true"
              },
              {
                "key": "expr",
                "value": "sum_d / count_d"
              }
            ]
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_d"
            ],
            "targetField": "count_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "sum_d"
            ],
            "targetField": "sum_d",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "dailyMetricsRollup-histograms",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "histogram"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-13MONTHS TO NOW-1MONTH]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p50_d"
            ],
            "targetField": "p50_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p75_d"
            ],
            "targetField": "p75_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p98_d"
            ],
            "targetField": "p98_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p99_d"
            ],
            "targetField": "p99_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p999_d"
            ],
            "targetField": "p999_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_mean_rate_d"
            ],
            "targetField": "mean_mean_rate_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_mean_duration_d"
            ],
            "targetField": "mean_mean_duration_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "quantiles_ds"
            ],
            "targetField": "quantiles_ds",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "quantiles_ls"
            ],
            "targetField": "quantiles_ls",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "dailyMetricsRollup-timers",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "timer"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-13MONTHS TO NOW-1MONTH]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p50_d"
            ],
            "targetField": "p50_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p75_d"
            ],
            "targetField": "p75_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p98_d"
            ],
            "targetField": "p98_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p99_d"
            ],
            "targetField": "p99_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p999_d"
            ],
            "targetField": "p999_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_mean_rate_d"
            ],
            "targetField": "mean_mean_rate_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_mean_duration_d"
            ],
            "targetField": "mean_mean_duration_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "quantiles_ds"
            ],
            "targetField": "quantiles_ds",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "quantiles_ls"
            ],
            "targetField": "quantiles_ls",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "hourlyMetricsRollup-timers",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "timer"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-1MONTH TO NOW-1DAY]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_rate_d"
            ],
            "targetField": "mean_mean_rate_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_d"
            ],
            "targetField": "mean_mean_duration_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p50_d"
            ],
            "targetField": "p50_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p75_d"
            ],
            "targetField": "p75_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p98_d"
            ],
            "targetField": "p98_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p99_d"
            ],
            "targetField": "p99_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p999_d"
            ],
            "targetField": "p999_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "values_ds"
            ],
            "targetField": "quantiles_ds",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "values_ls"
            ],
            "targetField": "quantiles_ls",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "histogram",
            "sourceFields": [
              "values_ds"
            ],
            "targetField": "histogram_ds",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "histogram",
            "sourceFields": [
              "values_ls"
            ],
            "targetField": "histogram_ls",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "hourlyMetricsRollup-counters",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "counter"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-1MONTH TO NOW-1DAY]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "hourlyMetricsRollup-meters",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "meter"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-1MONTH TO NOW-1DAY]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_rate_d"
            ],
            "targetField": "mean_mean_rate_d",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "hourlyMetricsRollup-histograms",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "histogram"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-1MONTH TO NOW-1DAY]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "min",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "mean_d"
            ],
            "targetField": "mean_mean_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p50_d"
            ],
            "targetField": "p50_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p75_d"
            ],
            "targetField": "p75_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p98_d"
            ],
            "targetField": "p98_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p99_d"
            ],
            "targetField": "p99_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "mean",
            "sourceFields": [
              "p999_d"
            ],
            "targetField": "p999_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "values_ds"
            ],
            "targetField": "quantiles_ds",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "quantiles",
            "sourceFields": [
              "values_ls"
            ],
            "targetField": "quantiles_ls",
            "mapper": false,
            "parameters": [
              {
                "key": "multiValued",
                "value": "true"
              }
            ]
          },
          {
            "type": "histogram",
            "sourceFields": [
              "values_ds"
            ],
            "targetField": "histogram_ds",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "histogram",
            "sourceFields": [
              "values_ls"
            ],
            "targetField": "histogram_ls",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      },
      {
        "id": "dailyMetricsRollup-counters",
        "groupingFields": [
          "name_s",
          "server_s"
        ],
        "signalTypes": [
          "counter"
        ],
        "selectQuery": "*:*",
        "timeRange": "[NOW-13MONTHS TO NOW-1MONTH]",
        "outputPipeline": "default",
        "outputCollection": "system_metrics",
        "sourceRemove": true,
        "sourceCatchup": false,
        "outputRollup": false,
        "aggregates": [
          {
            "type": "max",
            "sourceFields": [
              "max_d"
            ],
            "targetField": "max_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "min",
            "sourceFields": [
              "min_d"
            ],
            "targetField": "min_d",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "max",
            "sourceFields": [
              "count_l"
            ],
            "targetField": "count_l",
            "mapper": false,
            "parameters": []
          },
          {
            "type": "sum",
            "sourceFields": [
              "count_increment_l"
            ],
            "targetField": "count_increment_l",
            "mapper": false,
            "parameters": []
          }
        ],
        "statsFields": [
          "aggr_count_i",
          "count_i",
          "position_i",
          "weight_d"
        ]
      }
    ],
    "features": {
      "finance": [
        {
          "name": "partitionByTime",
          "collectionId": "finance",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "finance",
          "params": {},
          "enabled": false
        },
        {
          "name": "dynamicSchema",
          "collectionId": "finance",
          "params": {},
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "finance",
          "params": {},
          "enabled": false
        }
      ]
    },
    "indexProfiles": {
      "finance": {
        "default": "finance-default"
      }
    },
    "queryProfiles": {
      "finance": {
        "latest-news": "latest-news",
        "default": "finance-default"
      }
    },
    "parsers": [
      {
        "id": "index-s-and-p",
        "enableMediaTypeDetection": true,
        "maxParserDepth": 16,
        "parserStages": [
          {
            "type": "csv",
            "label": "csv",
            "enabled": true,
            "mediaTypes": [
              "text/csv",
              "text/plain"
            ],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "r96kf6xjeyihk6gvi",
            "charset": "detect",
            "ignoreBOM": false,
            "autoDetect": true,
            "hasHeaders": true,
            "headers": [],
            "fillValue": "<FILL>",
            "trimWhitespace": true,
            "skipEmptyLines": true,
            "includeRowNumber": true,
            "commentHandling": "ignore",
            "maxRowLength": 10485760,
            "maxNumColumns": 1000,
            "maxColumnChars": 10485760,
            "columnHandling": "default",
            "inheritMediaTypes": true
          }
        ],
        "properties": {
          "sourceId": "index-s-and-p",
          "forSimulation": false,
          "lastModified": 1491837218192
        }
      }
    ],
    "dataSources": [
      {
        "id": "sp_500_list_30_csv-finance",
        "created": "2017-04-19T18:09:26.724Z",
        "modified": "2017-04-19T18:09:26.724Z",
        "connector": "lucid.fileupload",
        "type": "fileupload",
        "pipeline": "finance-default",
        "parserId": "default",
        "properties": {
          "mediaType": "application/octet-stream",
          "collection": "finance",
          "fileId": "sp500List-30.csv"
        }
      },
      {
        "id": "index-s-and-p-30",
        "created": "2017-04-07T18:34:50.115Z",
        "modified": "2017-04-07T18:34:50.115Z",
        "connector": "lucid.anda",
        "type": "web",
        "pipeline": "finance-default",
        "parserId": "index-s-and-p",
        "properties": {
          "refreshOlderThan": -1,
          "emitThreads": 5,
          "f.appendTrailingSlashToLinks": false,
          "diagnosticMode": false,
          "refreshErrors": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "dedupeSaveSignature": false,
          "crawlDBType": "in-memory",
          "delete": true,
          "initial_mapping": {
            "mappings": [
              {
                "source": "charSet",
                "target": "charSet_s",
                "operation": "move"
              },
              {
                "source": "fetchedDate",
                "target": "fetchedDate_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "signature",
                "target": "dedupeSignature_s",
                "operation": "move"
              },
              {
                "source": "contentSignature",
                "target": "signature_s",
                "operation": "move"
              },
              {
                "source": "length",
                "target": "length_l",
                "operation": "move"
              },
              {
                "source": "mimeType_s",
                "target": "text/csv",
                "operation": "set"
              },
              {
                "source": "parent",
                "target": "parent_s",
                "operation": "move"
              },
              {
                "source": "owner",
                "target": "owner_s",
                "operation": "move"
              },
              {
                "source": "group",
                "target": "group_s",
                "operation": "move"
              },
              {
                "source": "mimeType",
                "target": "text/csv",
                "operation": "set"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "id": "FromMap",
            "label": "field-mapping",
            "type": "field-mapping"
          },
          "f.discardLinkURLQueries": false,
          "fetchDelayMS": 0,
          "f.respectMetaEquivRedirects": false,
          "restrictToTreeUseHostAndPath": false,
          "refreshAll": true,
          "f.defaultMIMEType": "text/csv",
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "startLinks": [
            "https://raw.githubusercontent.com/lucidworks/fusion-financial-demo/master/data/sp/sample/sp500List-30.csv"
          ],
          "failFastOnStartLinkFailure": true,
          "f.timeoutMS": 10000,
          "restrictToTreeAllowSubdomains": false,
          "maxItems": 1,
          "dedupe": false,
          "chunkSize": 50,
          "f.scrapeLinksBeforeFiltering": false,
          "trackEmbeddedIDs": true,
          "f.allowAllCertificates": false,
          "f.obeyRobotsDelay": true,
          "collection": "finance",
          "deleteErrorsAfter": -1,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "forceRefresh": false,
          "retryEmit": true,
          "depth": -1,
          "f.obeyRobots": true,
          "f.cookieSpec": "browser-compatibility",
          "f.maxSizeBytes": 4194304,
          "refreshStartLinks": false,
          "aliasExpiration": 1,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "indexCrawlDBToSolr": false,
          "restrictToTree": true,
          "retainOutlinks": true,
          "f.defaultCharSet": "UTF-8"
        }
      },
      {
        "id": "index-s-and-p-100",
        "created": "2017-04-07T18:34:50.115Z",
        "modified": "2017-04-07T18:34:50.115Z",
        "connector": "lucid.anda",
        "type": "web",
        "pipeline": "finance-default",
        "parserId": "index-s-and-p",
        "properties": {
          "refreshOlderThan": -1,
          "emitThreads": 5,
          "f.appendTrailingSlashToLinks": false,
          "diagnosticMode": false,
          "refreshErrors": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "dedupeSaveSignature": false,
          "crawlDBType": "in-memory",
          "delete": true,
          "initial_mapping": {
            "mappings": [
              {
                "source": "charSet",
                "target": "charSet_s",
                "operation": "move"
              },
              {
                "source": "fetchedDate",
                "target": "fetchedDate_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "signature",
                "target": "dedupeSignature_s",
                "operation": "move"
              },
              {
                "source": "contentSignature",
                "target": "signature_s",
                "operation": "move"
              },
              {
                "source": "length",
                "target": "length_l",
                "operation": "move"
              },
              {
                "source": "mimeType_s",
                "target": "text/csv",
                "operation": "set"
              },
              {
                "source": "parent",
                "target": "parent_s",
                "operation": "move"
              },
              {
                "source": "owner",
                "target": "owner_s",
                "operation": "move"
              },
              {
                "source": "group",
                "target": "group_s",
                "operation": "move"
              },
              {
                "source": "mimeType",
                "target": "text/csv",
                "operation": "set"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "id": "FromMap",
            "label": "field-mapping",
            "type": "field-mapping"
          },
          "f.discardLinkURLQueries": false,
          "fetchDelayMS": 0,
          "f.respectMetaEquivRedirects": false,
          "restrictToTreeUseHostAndPath": false,
          "refreshAll": true,
          "f.defaultMIMEType": "text/csv",
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "startLinks": [
            "https://raw.githubusercontent.com/lucidworks/fusion-financial-demo/master/data/sp/sample/sp500List-100.csv"
          ],
          "failFastOnStartLinkFailure": true,
          "f.timeoutMS": 10000,
          "restrictToTreeAllowSubdomains": false,
          "maxItems": 1,
          "dedupe": false,
          "chunkSize": 50,
          "f.scrapeLinksBeforeFiltering": false,
          "trackEmbeddedIDs": true,
          "f.allowAllCertificates": false,
          "f.obeyRobotsDelay": true,
          "collection": "finance",
          "deleteErrorsAfter": -1,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "forceRefresh": false,
          "retryEmit": true,
          "depth": -1,
          "f.obeyRobots": true,
          "f.cookieSpec": "browser-compatibility",
          "f.maxSizeBytes": 4194304,
          "refreshStartLinks": false,
          "aliasExpiration": 1,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "indexCrawlDBToSolr": false,
          "restrictToTree": true,
          "retainOutlinks": true,
          "f.defaultCharSet": "UTF-8"
        }
      },
      {
        "id": "index-s-and-p",
        "created": "2017-04-07T18:34:50.115Z",
        "modified": "2017-04-07T18:34:50.115Z",
        "connector": "lucid.anda",
        "type": "web",
        "pipeline": "finance-default",
        "parserId": "index-s-and-p",
        "properties": {
          "refreshOlderThan": -1,
          "emitThreads": 5,
          "f.appendTrailingSlashToLinks": false,
          "diagnosticMode": false,
          "refreshErrors": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "dedupeSaveSignature": false,
          "crawlDBType": "in-memory",
          "delete": true,
          "initial_mapping": {
            "mappings": [
              {
                "source": "charSet",
                "target": "charSet_s",
                "operation": "move"
              },
              {
                "source": "fetchedDate",
                "target": "fetchedDate_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "signature",
                "target": "dedupeSignature_s",
                "operation": "move"
              },
              {
                "source": "contentSignature",
                "target": "signature_s",
                "operation": "move"
              },
              {
                "source": "length",
                "target": "length_l",
                "operation": "move"
              },
              {
                "source": "mimeType_s",
                "target": "text/csv",
                "operation": "set"
              },
              {
                "source": "parent",
                "target": "parent_s",
                "operation": "move"
              },
              {
                "source": "owner",
                "target": "owner_s",
                "operation": "move"
              },
              {
                "source": "group",
                "target": "group_s",
                "operation": "move"
              },
              {
                "source": "mimeType",
                "target": "text/csv",
                "operation": "set"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "id": "FromMap",
            "label": "field-mapping",
            "type": "field-mapping"
          },
          "f.discardLinkURLQueries": false,
          "fetchDelayMS": 0,
          "f.respectMetaEquivRedirects": false,
          "restrictToTreeUseHostAndPath": false,
          "refreshAll": true,
          "f.defaultMIMEType": "text/csv",
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "startLinks": [
            "https://raw.githubusercontent.com/lucidworks/fusion-financial-demo/master/data/sp/full/sandp500.csv"
          ],
          "failFastOnStartLinkFailure": true,
          "f.timeoutMS": 10000,
          "restrictToTreeAllowSubdomains": false,
          "maxItems": 1,
          "dedupe": false,
          "chunkSize": 50,
          "f.scrapeLinksBeforeFiltering": false,
          "trackEmbeddedIDs": true,
          "f.allowAllCertificates": false,
          "f.obeyRobotsDelay": true,
          "collection": "finance",
          "deleteErrorsAfter": -1,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "forceRefresh": false,
          "retryEmit": true,
          "depth": -1,
          "f.obeyRobots": true,
          "f.cookieSpec": "browser-compatibility",
          "f.maxSizeBytes": 4194304,
          "refreshStartLinks": false,
          "aliasExpiration": 1,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "indexCrawlDBToSolr": false,
          "restrictToTree": true,
          "retainOutlinks": true,
          "f.defaultCharSet": "UTF-8"
        }
      },
      {
        "id": "start-crawlers",
        "created": "2017-04-07T18:33:18.771Z",
        "modified": "2017-04-07T18:33:18.771Z",
        "connector": "lucid.anda",
        "type": "web",
        "pipeline": "start-crawlers",
        "parserId": "index-s-and-p",
        "properties": {
          "refreshOlderThan": -1,
          "emitThreads": 5,
          "f.appendTrailingSlashToLinks": false,
          "diagnosticMode": false,
          "refreshErrors": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "dedupeSaveSignature": false,
          "crawlDBType": "in-memory",
          "delete": true,
          "initial_mapping": {
            "mappings": [
              {
                "source": "charSet",
                "target": "charSet_s",
                "operation": "move"
              },
              {
                "source": "fetchedDate",
                "target": "fetchedDate_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "signature",
                "target": "dedupeSignature_s",
                "operation": "move"
              },
              {
                "source": "contentSignature",
                "target": "signature_s",
                "operation": "move"
              },
              {
                "source": "length",
                "target": "length_l",
                "operation": "move"
              },
              {
                "source": "mimeType",
                "target": "mimeType_s",
                "operation": "move"
              },
              {
                "source": "parent",
                "target": "parent_s",
                "operation": "move"
              },
              {
                "source": "owner",
                "target": "owner_s",
                "operation": "move"
              },
              {
                "source": "group",
                "target": "group_s",
                "operation": "move"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "id": "FromMap",
            "label": "field-mapping",
            "type": "field-mapping"
          },
          "f.discardLinkURLQueries": false,
          "fetchDelayMS": 0,
          "f.respectMetaEquivRedirects": false,
          "restrictToTreeUseHostAndPath": false,
          "refreshAll": true,
          "f.defaultMIMEType": "application/octet-stream",
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "startLinks": [
            "https://raw.githubusercontent.com/lucidworks/fusion-financial-demo/master/data/sp/full/sandp500.csv"
          ],
          "failFastOnStartLinkFailure": true,
          "f.timeoutMS": 10000,
          "restrictToTreeAllowSubdomains": false,
          "maxItems": 1,
          "dedupe": false,
          "chunkSize": 50,
          "f.scrapeLinksBeforeFiltering": false,
          "trackEmbeddedIDs": true,
          "f.allowAllCertificates": false,
          "f.obeyRobotsDelay": true,
          "collection": "finance",
          "deleteErrorsAfter": -1,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "forceRefresh": false,
          "retryEmit": true,
          "depth": -1,
          "f.obeyRobots": true,
          "f.cookieSpec": "browser-compatibility",
          "f.maxSizeBytes": 4194304,
          "refreshStartLinks": false,
          "aliasExpiration": 1,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "indexCrawlDBToSolr": false,
          "restrictToTree": true,
          "retainOutlinks": true,
          "f.defaultCharSet": "UTF-8"
        }
      },
      {
        "id": "delete-datasources",
        "created": "2017-04-07T18:32:44.169Z",
        "modified": "2017-04-07T18:32:44.169Z",
        "connector": "lucid.anda",
        "type": "web",
        "pipeline": "delete-datasources",
        "parserId": "index-s-and-p",
        "properties": {
          "refreshOlderThan": -1,
          "emitThreads": 5,
          "f.appendTrailingSlashToLinks": false,
          "diagnosticMode": false,
          "refreshErrors": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "dedupeSaveSignature": false,
          "crawlDBType": "in-memory",
          "delete": true,
          "initial_mapping": {
            "mappings": [
              {
                "source": "charSet",
                "target": "charSet_s",
                "operation": "move"
              },
              {
                "source": "fetchedDate",
                "target": "fetchedDate_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "signature",
                "target": "dedupeSignature_s",
                "operation": "move"
              },
              {
                "source": "contentSignature",
                "target": "signature_s",
                "operation": "move"
              },
              {
                "source": "length",
                "target": "length_l",
                "operation": "move"
              },
              {
                "source": "mimeType",
                "target": "mimeType_s",
                "operation": "move"
              },
              {
                "source": "parent",
                "target": "parent_s",
                "operation": "move"
              },
              {
                "source": "owner",
                "target": "owner_s",
                "operation": "move"
              },
              {
                "source": "group",
                "target": "group_s",
                "operation": "move"
              }
            ],
            "reservedFieldsMappingAllowed": false,
            "skip": false,
            "id": "FromMap",
            "label": "field-mapping",
            "type": "field-mapping"
          },
          "f.discardLinkURLQueries": false,
          "fetchDelayMS": 0,
          "f.respectMetaEquivRedirects": false,
          "restrictToTreeUseHostAndPath": false,
          "refreshAll": true,
          "f.defaultMIMEType": "application/octet-stream",
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "startLinks": [
            "https://raw.githubusercontent.com/lucidworks/fusion-financial-demo/master/data/sp/full/sandp500.csv"
          ],
          "failFastOnStartLinkFailure": true,
          "f.timeoutMS": 10000,
          "restrictToTreeAllowSubdomains": false,
          "maxItems": 1,
          "dedupe": false,
          "chunkSize": 50,
          "f.scrapeLinksBeforeFiltering": false,
          "trackEmbeddedIDs": true,
          "f.allowAllCertificates": false,
          "f.obeyRobotsDelay": true,
          "collection": "finance",
          "deleteErrorsAfter": -1,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "forceRefresh": false,
          "retryEmit": true,
          "depth": -1,
          "f.obeyRobots": true,
          "f.cookieSpec": "browser-compatibility",
          "f.maxSizeBytes": 4194304,
          "refreshStartLinks": false,
          "aliasExpiration": 1,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "indexCrawlDBToSolr": false,
          "restrictToTree": true,
          "retainOutlinks": true,
          "f.defaultCharSet": "UTF-8"
        }
      }
    ]
  },
  "metadata": {
    "formatVersion": "1",
    "exportedBy": "7f17604b-6a29-41ce-b2bb-4c0b30b08ab7",
    "exportedDate": "2017-04-22T14:58:09.499Z",
    "fusionVersion": "3.0.1",
    "fusionGuid": "33768982-ade4-4c9a-98be-7ad7bd520040"
  }
}