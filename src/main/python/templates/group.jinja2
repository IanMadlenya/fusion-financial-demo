<script>
    var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%SZ").parse;

    var margin = {top: 20, right: 20, bottom: 30, left: 50},
            width = 560 - margin.left - margin.right,
            height = 200 - margin.top - margin.bottom;
    //1997-11-25T00:00:00Z


    var x = d3.time.scale()
            .range([0, width]);

    var y = d3.scale.linear()
            .range([height, 0]);

    var xAxis = d3.svg.axis()
            .scale(x)
            .ticks(d3.time.day, 16)
            .tickFormat(d3.time.format("%y-%m-%d"))
            .orient("bottom");

    var yAxis = d3.svg.axis()
            .scale(y)
            .ticks(8)
            .orient("left");

    var line = d3.svg.line()
            .x(function (d) {
                return x(d.date);
            })
            .y(function (d) {
                return y(d.close);
            });

    function display_data(svg, data) {
        data.forEach(function (d) {
            d.date = parseDate(d[0]);
            d.close = +d[1];
        });

        x.domain(d3.extent(data, function (d) {
            return d.date;
        }));
        y.domain(d3.extent(data, function (d) {
            return d.close;
        }));
        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

        svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Close ($)");

        svg.append("path")
                .datum(data)
                .attr("class", "line")
                .attr("d", line);
    }

    function draw_chart(symbol, stock_data) {

        var svg = d3.select("#" + symbol + "_chart").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        //console.log("Data: "+ stock_data);
        display_data(svg, stock_data)

    }

</script>
<div id="search_results" class="search-results">
    {% for group_val in grouped %}
        {% set loopVar = loop %}
        <div>Total Matched: {{ grouped[group_val]['matches'] }}</div>
        <div class="search-result">

            {% for groups in grouped[group_val]['groups'] %}
                <div class="header">{{ groups['groupValue'] }}</div>
                <div class="chart" id="{{ groups['groupValue'] }}_chart"></div>
                <div class="header">Summary</div>

                {% if sort_criteria == 'trade_date' %}{% for doclist in groups['doclist'] %}

                    {% if doclist == 'docs' %}
                        {% set data = chart_data(groups['doclist'][doclist]) %}
                        <script>
                        stock_data = {{ data }};
                        draw_chart("{{ groups['groupValue'] }}", stock_data);
                        </script>
                    {% endif %}

                {% endfor %}{% endif %}

                {% for doclist in groups['doclist'] %}

                    {% if doclist == 'docs' %}
                        <table class="table table-condensed">
                        <tr>
                            <th>Date</th>
                            <th>Open</th>
                            <th>Close</th>
                            <th>Volume</th>
                            <th>High</th>
                            <th>Low</th>
                        </tr>
                        {% for doc in groups['doclist'][doclist] %}
                            {% if loop.index0 < 10 %}
                              <tr>
                                  <td>{{ doc['trade_date'] }}</td>
                                  <td>{{ doc['open'] }}</td>
                                  <td>{{ doc['close'] }}</td>
                                  <td>{{ doc['volume'] }}</td>
                                  <td>{{ doc['high'] }}</td>
                                  <td>{{ doc['low'] }}</td>
                              </tr>
                            {%  endif %}
                        {% endfor %}
                    {% endif %}

                {% endfor %}
                </table>
            {% endfor %}
        </div>
    {% endfor %}

</div>